/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 17.12.2024 09:02:16

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 21232, -35899, -33700, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.0002450530300848186, 0.00014979210391175002, 0.00017705257050693035, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 57,54,81,-51,-45,29,-4,15,-20,91,42,-7,-5,-19,35,8,-26,70,36,74,-62,-19,3,-68,-85,63,-21,28,127,-8,-11,-27, 
  /* [1][0][][] */ 48,-37,-53,9,-13,127,0,-15,117,-106,-33,-61,-51,102,20,-60,95,-31,17,-81,-101,5,126,81,16,45,21,1,-100,-34,-9,-4, 
  /* [2][0][][] */ -30,66,-51,68,66,-36,-15,99,80,16,102,13,-69,-68,66,95,-69,-30,27,-79,75,99,-38,-71,73,-21,-1,-127,-26,-43,75,6, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0051509696058928967, 0.0031486025545746088, 0.0037216125056147575, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -263, -398, -1558, -127, -53, 36, -1290, 186, -42, 1476, 191, -1001, -1264, -354, -216, -445, -76, -1387, -1586, -1586, -1142, 113, -243, -251, -157, -1694, -1705, -1202, 1049, -1668, -593, -1639, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.5722354116151109e-05, 3.6592377000488341e-05, 4.6428765926975757e-05, 4.4340060412650928e-05, 4.0009923395700753e-05, 4.8300378693966195e-05, 4.7011773858685046e-05, 5.0606362492544577e-05, 4.8625668569002301e-05, 7.0524467446375638e-05, 5.2899213187629357e-05, 5.5842639994807541e-05, 4.9477079301141202e-05, 4.4691034418065101e-05, 4.4834261643700302e-05, 4.5353936002356932e-05, 4.4006665120832622e-05, 4.8521174903726205e-05, 5.0106980779673904e-05, 4.8816880735103041e-05, 4.4635238737100735e-05, 4.1450428398093209e-05, 5.7594163081375882e-05, 4.6280827518785372e-05, 4.3433556129457429e-05, 5.1530820201151073e-05, 5.4358504712581635e-05, 4.5930297346785665e-05, 8.8165848865173757e-05, 5.1402537792455405e-05, 4.0482987969880924e-05, 5.1262944907648489e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -39,-53,100,5,54,-9,-114,-114,43,-115,-109,-12,52,16,-32,42,-38,-54,-95,-50,-63,-102,-1,83,-127,-20,82,-41,97,4,-40,-80,58,-63,-82,53,-75,-98,-70,19,15,-91,-80,86,45,-95,107,-9,-23,-108,-36,63,-68,-54,-98,96,-14,49,102,-110,-54,65,-64,23,-2,3,54,68,51,90,61,-117,87,-126,39,55,-86,7,-57,41,44,-1,38,-54,-38,-56,-95,69,9,102,-15,-111,-39,44,-9,-18, 
  /* [1][0][][] */ -62,37,-107,-32,-54,108,27,40,101,-127,-110,52,75,-20,42,63,105,-30,32,112,-51,4,31,-2,35,8,-66,110,-25,-4,68,-50,63,102,-6,40,49,75,0,-54,-113,-18,-90,-102,-52,11,-44,-62,-8,-102,113,69,-17,112,-102,-62,37,99,41,105,-72,110,-54,-120,-79,22,73,41,115,-14,31,3,-116,112,-53,21,78,-72,-40,73,-104,88,-24,-111,39,112,-77,-62,92,86,86,8,87,99,41,-10, 
  /* [2][0][][] */ 15,-1,-86,43,-46,-88,51,47,-122,87,-64,77,41,-44,34,-127,-84,-54,5,9,-119,-45,57,-14,-48,50,51,-28,-91,32,41,45,-88,-48,-114,-116,-111,46,53,-54,-97,-93,-25,-42,-108,68,-48,-100,55,14,43,-105,-74,19,-13,-19,-65,46,-88,-25,-53,14,-66,28,43,4,8,44,-117,18,-29,-96,-5,-95,-7,-11,-81,-58,-33,-24,-4,-108,-39,-71,-29,-116,-53,-64,43,64,-51,-27,-40,-96,-76,-87, 
  /* [3][0][][] */ 57,20,35,-39,-79,77,-127,44,67,-11,64,-36,92,83,81,13,111,95,-88,16,118,-81,-46,-100,-22,-126,-58,117,30,-74,31,27,-53,-33,-10,-14,-57,-38,42,62,-75,-121,-105,24,83,19,-58,-70,72,-115,27,-9,76,40,40,-98,-118,-94,-107,-43,-65,41,-34,31,50,-18,-62,-25,-9,-72,13,94,21,-113,57,-61,50,92,107,-43,-78,-121,10,47,31,37,-42,-80,-65,56,-12,-94,46,-85,-61,-14, 
  /* [4][0][][] */ 42,120,-19,20,-31,11,19,17,72,55,-1,0,32,-42,0,-56,-4,8,-127,23,114,-96,97,26,-24,-26,72,-37,-60,46,-110,-27,57,111,15,-100,-36,-32,-104,69,-90,-78,-121,-63,51,83,24,60,39,-103,-23,-66,-106,65,-117,10,7,-80,14,28,25,-60,-32,-95,-46,63,-14,-27,46,-115,-90,-80,-49,0,109,35,79,-4,9,-46,-6,-53,-93,-51,7,73,77,22,-105,-58,39,47,-25,85,-93,-85, 
  /* [5][0][][] */ 68,-69,76,68,14,-82,-12,21,108,-127,-10,-64,31,75,42,34,67,37,-116,86,41,13,21,-8,-109,-81,14,-60,41,35,-8,-82,-35,3,-52,3,-77,-47,36,28,-123,-51,53,95,-7,30,28,-45,-119,49,19,14,36,-18,15,-17,39,46,-39,-43,50,-45,-3,-71,-19,96,-30,14,73,15,91,-56,-44,33,-25,-59,30,-34,21,77,94,5,1,55,-62,53,-1,29,37,-80,89,77,-77,5,66,-83, 
  /* [6][0][][] */ -11,-62,68,38,-94,-82,-23,30,-36,-92,-20,-104,45,21,70,-124,1,19,-24,59,-89,-123,65,24,-73,-92,-34,-71,-48,-118,13,-92,-96,-127,-63,-111,-32,8,-116,40,88,23,-5,-38,-120,63,-101,-64,-67,-8,-47,-52,25,-66,53,-49,-16,-35,-80,123,-105,-25,32,-84,-69,32,57,-67,39,-31,-113,-29,21,-81,-100,-58,-91,-108,-71,-49,3,-50,13,-32,-84,-96,-58,-102,47,55,55,-11,-61,-79,42,-47, 
  /* [7][0][][] */ 86,70,-29,-44,-65,115,-31,15,105,-20,-69,-33,49,-65,50,66,53,20,-12,91,54,30,5,61,-43,61,39,61,-68,93,-77,45,17,19,55,81,-65,66,2,-8,32,-108,30,72,50,-10,71,-79,52,-69,-100,-57,-26,81,-12,17,85,-63,2,-36,18,2,67,-127,-62,-35,53,24,-67,4,61,69,70,16,55,36,-35,29,-61,47,73,-37,-16,-88,75,27,-88,92,76,24,68,50,-66,-32,6,-64, 
  /* [8][0][][] */ -3,42,-28,-80,28,45,-96,-17,30,-13,36,56,13,-41,-51,-51,-34,77,-87,21,43,-27,76,97,-109,35,60,82,-60,30,-112,106,70,-28,42,-11,117,-15,-12,75,8,62,-84,-72,13,-18,-28,89,18,-127,-57,-14,-52,-6,-49,-92,8,95,-74,86,115,45,19,62,-22,-23,-24,77,-50,49,36,0,61,33,12,9,-13,94,86,72,33,36,-113,-107,27,26,58,-17,26,-23,-77,85,-124,-90,-23,27, 
  /* [9][0][][] */ 12,6,85,67,85,-38,41,-41,0,35,-11,33,-28,-32,-60,32,-2,-21,-36,-32,-8,66,-57,-69,127,20,-31,18,23,-41,0,84,31,3,13,0,-67,56,1,-45,80,12,36,-73,37,68,-52,59,3,37,-26,3,69,-41,15,76,69,-39,24,-21,-83,67,77,15,-26,5,81,63,-15,64,61,-50,3,97,-58,6,-60,-63,-32,64,37,72,121,82,-9,-12,26,7,86,53,30,74,114,9,47,57, 
  /* [10][0][][] */ -52,75,70,-61,-30,86,51,35,39,-1,23,-95,78,63,-14,18,-28,63,-95,-44,-3,23,51,-68,35,22,-83,-70,-43,68,-127,-59,60,73,91,57,-15,2,-16,32,-79,44,-116,-13,-76,-57,-12,-37,-4,-20,14,-10,42,27,-87,-34,-79,-10,24,-30,7,60,87,5,88,-52,-73,-13,30,-34,-62,-47,66,43,-53,71,0,38,64,27,60,-8,31,48,-70,52,72,-1,39,25,-3,-54,-69,-39,-27,-66, 
  /* [11][0][][] */ 58,-14,-32,52,62,10,18,41,56,114,-70,61,-26,-80,-2,-69,-61,-92,76,6,-1,39,-5,-77,-97,-85,-37,26,35,-28,-1,-35,-80,-72,17,12,-67,32,-43,-60,-36,51,-75,-19,-52,-64,-70,-85,79,127,56,14,-88,-86,-8,2,-67,-60,-43,-84,-79,40,36,-14,-2,38,-56,-1,39,19,-81,-73,7,52,-92,14,-70,1,-54,39,-97,-35,-72,-53,11,-79,-6,-40,-89,-28,-15,-92,-76,-45,-71,-48, 
  /* [12][0][][] */ -6,22,-71,-25,52,-23,-38,8,-91,57,-31,6,-66,-17,9,-93,-109,-56,-60,-97,-11,-33,-21,50,-83,-50,46,-112,46,-22,-39,67,-85,-80,-68,9,-37,-84,-44,4,113,12,-118,-65,-50,-91,-62,60,-64,-77,-83,80,1,-29,-87,37,8,-76,12,40,12,61,-33,20,60,-3,-61,70,15,49,1,31,35,66,-45,-30,-62,-7,-127,-106,-74,74,12,1,-61,-6,13,58,-100,-112,46,10,106,-22,-3,36, 
  /* [13][0][][] */ 75,-71,92,80,56,81,33,34,83,-104,4,-31,78,64,68,-66,-98,-74,-84,22,75,-39,97,-43,-119,23,20,16,-74,-66,46,10,41,78,-11,4,-62,-44,20,53,-94,28,-35,8,-35,5,-11,-55,0,77,-41,-127,-93,-7,60,-86,-88,23,-46,-90,-8,102,-83,-17,-55,-52,-88,47,-29,-3,90,3,-97,-6,-76,-43,-101,51,79,-54,43,-125,40,-12,-101,-114,76,88,-35,-66,-86,40,43,-80,62,-42, 
  /* [14][0][][] */ -65,-79,76,50,46,-7,-47,-93,-66,-80,58,35,-32,-81,-73,-70,-39,-64,-23,20,-36,22,0,40,-105,-98,-25,35,-118,-102,-112,44,73,-34,-36,-4,96,92,34,-97,-58,-125,19,90,62,-106,34,-77,79,-2,59,32,79,-18,-45,-3,-79,5,45,81,-6,-74,-40,35,-83,-15,62,-98,-68,-87,-79,77,-5,56,45,-78,57,-112,56,34,38,-46,-127,-66,-100,-94,-108,106,97,18,65,-56,23,69,-4,34, 
  /* [15][0][][] */ 17,-25,-47,48,57,-58,28,-64,62,-18,-55,-45,98,11,-64,-110,78,14,-79,4,41,27,56,63,68,51,14,78,-8,38,18,-71,2,9,-50,4,-64,105,109,-52,-17,58,-94,-21,9,-103,-37,-71,-5,-87,-17,30,-116,-72,-78,-6,66,37,-63,100,-53,-70,16,51,-46,71,-73,2,-45,-20,66,-73,24,-6,50,-127,-11,7,95,66,-84,47,-62,-56,-90,-49,-83,28,81,64,-101,-52,32,97,-86,93, 
  /* [16][0][][] */ -60,1,109,-50,20,102,-82,6,59,34,-102,71,3,-45,-40,-51,114,66,46,68,111,48,-27,71,-54,37,-28,67,-80,25,20,6,-89,76,59,46,-16,30,-47,-52,-20,-48,97,91,77,105,104,-16,-80,-114,6,90,-27,83,45,49,-14,88,69,-7,127,107,9,47,56,27,-39,75,48,111,-21,-5,30,50,54,80,11,103,-91,-2,22,-104,17,-24,15,81,100,3,51,9,-17,109,16,-30,-74,0, 
  /* [17][0][][] */ 7,-123,-2,39,-63,-126,-81,-115,3,-88,35,20,49,23,-125,5,-6,10,57,63,-107,-38,-20,-74,21,29,-94,-12,60,-76,-49,31,-52,-51,-4,-17,-70,54,-103,-55,-103,-60,-39,-43,-22,-18,48,-117,50,64,-37,0,-45,30,57,-85,-113,36,-97,-58,-6,-106,28,53,-98,-94,2,-116,-122,-31,60,-9,-19,-120,-87,25,63,-67,0,-76,-19,-31,-92,-98,-115,28,36,-61,-13,35,-106,-127,-33,52,-20,-10, 
  /* [18][0][][] */ -71,43,51,-88,-38,-114,-50,-14,-38,84,-98,-22,-62,2,15,-78,-15,17,54,-40,46,-50,-10,-92,-2,-103,-32,52,-10,-3,-28,23,2,-55,-115,-117,-51,44,-58,55,-24,-20,-71,-38,-113,-22,9,23,47,10,28,-3,-113,-16,6,37,-57,-3,-38,-99,34,54,-24,0,-82,-127,-49,37,19,-91,-89,53,-110,-23,-89,-115,9,37,-32,-89,-77,-16,-41,-86,51,-59,22,39,-113,-83,-74,50,76,-70,12,0, 
  /* [19][0][][] */ -13,-5,31,-1,22,-89,49,38,36,-76,-13,-38,-109,-5,-77,22,30,-108,61,17,-52,34,-76,-14,40,-95,-2,-81,-97,-121,-74,4,28,-97,-6,-33,-23,-90,-79,-111,-1,-114,-91,-22,-92,0,38,-100,15,-1,-61,17,-57,-15,-19,-35,-12,47,-33,-49,16,-70,46,24,-84,-29,-53,-30,-40,14,26,-77,-80,-127,-75,-93,-43,-112,-23,58,16,-113,-52,30,-93,-28,-27,-33,39,-4,-28,23,-53,69,16,-64, 
  /* [20][0][][] */ -19,48,29,51,-101,63,-13,56,10,17,-92,-38,-17,69,28,-87,-61,-34,-46,-47,10,-16,-86,-87,73,-76,-117,23,-5,-6,-66,89,83,19,-24,40,19,-43,-35,-98,-110,-60,-108,-112,-47,-87,-67,82,82,-127,-113,14,12,100,20,-28,93,43,61,74,68,-77,-58,-58,-50,-81,-55,-4,-93,-97,-67,49,-63,-87,13,-13,68,69,87,80,48,-16,62,-45,31,86,-41,55,13,76,8,29,14,17,-25,-23, 
  /* [21][0][][] */ 79,89,71,-109,71,-50,35,31,16,-87,-64,-3,10,37,-32,-76,-87,-27,16,-9,117,-43,78,-87,54,-107,-19,89,3,15,-65,-9,1,15,-83,-104,127,83,-100,-22,-65,-34,6,7,-84,-86,-87,95,-27,-101,-17,66,26,75,-125,14,-57,51,-48,117,66,-71,11,-49,76,35,-37,-65,-81,-9,67,74,33,-31,77,45,-89,-36,79,114,14,75,26,-110,31,-96,55,-57,-89,93,98,-113,-72,-60,78,-46, 
  /* [22][0][][] */ 9,-34,-34,-69,48,-27,43,-8,-48,27,-56,-77,84,-93,-74,-51,44,43,-127,-41,71,-91,21,36,38,-43,-53,78,-41,-45,-67,-76,28,42,7,1,13,-53,-56,-73,-38,-11,21,77,54,-64,61,-17,-63,-124,9,-1,-41,-88,-47,13,-30,-17,-17,-30,95,-44,-86,-98,-39,26,-102,-37,87,89,-16,-5,-53,-28,35,-59,48,-41,47,67,79,-94,-88,-86,53,43,70,-32,-76,13,-58,49,-42,12,-19,50, 
  /* [23][0][][] */ 48,-78,18,47,71,-94,-23,-127,57,-84,64,87,23,-118,11,-37,92,-28,-127,92,81,-101,90,-1,-37,-33,97,22,57,43,46,-39,-23,39,17,14,92,-34,-114,17,-118,-5,41,-86,-39,-63,91,11,62,-116,-80,-45,75,-71,-57,80,-116,-11,87,33,-77,-66,-90,-21,31,42,-118,-103,51,10,96,-63,-6,-67,-42,-79,54,7,76,102,-40,-68,-46,-126,73,1,102,-29,-103,24,74,7,25,-61,-34,30, 
  /* [24][0][][] */ -85,-25,-92,-80,-95,-73,-93,-79,81,74,78,-7,110,50,-24,-97,-54,44,4,-43,101,-78,-40,-29,48,-57,82,74,85,62,-52,-42,-8,2,47,23,-21,-95,60,0,-116,-127,85,27,36,-43,29,73,-78,-88,-28,7,55,65,30,-79,-13,78,21,7,102,2,31,50,-91,96,-51,-82,-75,54,-43,-24,-32,18,93,75,77,-53,-75,-60,-70,-107,-75,-127,7,53,-17,-65,30,-78,-5,-69,-56,27,-72,-9, 
  /* [25][0][][] */ -99,-73,-58,-6,48,-90,-121,12,2,-110,-69,2,17,-42,-124,-29,-91,9,62,-102,17,29,-45,-61,27,-68,-105,-1,11,-106,2,52,35,-117,-9,27,51,-15,-49,-52,-98,112,-76,-32,55,40,41,11,-118,62,-68,-16,23,-53,-54,-35,-53,3,-60,23,67,-3,9,35,-16,28,-31,-35,-105,-22,-56,-127,-10,-68,15,17,22,38,-25,-7,19,16,-43,92,-98,-45,-116,-83,-47,0,75,-17,-78,-16,-40,-32, 
  /* [26][0][][] */ 13,-117,-47,-37,-113,-26,-42,-34,-109,-110,43,45,-87,-61,-24,-46,46,-13,-80,-88,-25,29,35,-26,-13,17,-25,0,-24,-27,-110,-31,-41,-76,-101,-107,-81,36,-63,48,-111,29,5,-8,-83,10,-59,38,-47,-6,-44,43,-30,-65,-33,-101,34,12,11,-14,-33,-96,17,-57,43,-47,-73,8,-96,31,32,31,32,-94,-93,-24,1,-127,-102,-25,-57,25,29,-100,29,-43,-59,-23,-90,55,-24,-22,-67,51,-2,36, 
  /* [27][0][][] */ -1,-15,-77,-114,-87,-95,-56,-38,14,74,50,-55,-50,23,56,-49,26,-24,32,-95,-95,-16,-49,-25,-90,22,-119,-35,38,3,-30,-21,49,39,-105,-87,-102,-78,-121,42,-3,-9,-2,-11,60,12,25,56,87,70,57,-82,-100,-102,-25,-53,85,-48,-122,-27,-74,-77,-63,29,6,-63,-97,76,13,-17,-127,-7,19,-70,-37,-96,10,-26,51,58,49,-15,75,-39,-93,-90,-56,1,-60,-29,-56,-62,73,11,77,24, 
  /* [28][0][][] */ 64,17,45,44,-14,-2,35,36,-19,-29,40,21,-43,-38,12,91,39,54,51,33,-7,13,-56,-49,-2,74,-48,-29,-22,-19,54,25,-54,20,29,54,-4,-4,34,18,106,70,-45,31,-36,53,1,27,21,40,13,49,-12,24,83,18,55,3,39,45,-14,-5,5,49,57,46,71,103,-16,15,-62,2,31,30,15,17,-66,-54,-38,9,-24,9,127,58,34,-21,17,-2,4,36,39,-28,37,77,-31,3, 
  /* [29][0][][] */ 7,2,11,-70,-103,-30,-123,-26,38,-23,-104,-95,44,-107,-73,-70,-112,42,0,-84,-94,-52,5,-32,-47,-16,-69,-60,-107,-39,55,-41,5,-36,-95,-78,-42,53,-36,36,39,55,-65,24,-39,47,-62,-51,-20,-28,12,-111,24,-111,58,5,-98,5,-65,47,-127,35,-107,-68,-79,-86,9,30,34,-98,-9,-89,50,35,11,-13,49,-83,-60,-9,-38,-96,-29,-79,15,55,3,25,-54,50,26,23,-96,-24,-35,22, 
  /* [30][0][][] */ 4,-62,-65,20,-99,14,-65,-13,104,-30,-1,-42,-115,-4,39,11,-16,32,80,-103,28,-110,-109,6,-109,9,-74,113,-21,-105,-91,-11,-97,-86,-127,-68,15,-22,-4,24,87,-73,-14,96,87,-55,88,58,-68,48,16,-101,91,-52,-19,80,-86,-56,-79,-59,-101,-8,-70,-27,-108,-93,-94,73,-69,100,27,-35,-89,102,39,-83,-68,-68,-72,-62,22,1,-101,-21,-111,24,-107,104,-36,-111,60,48,-48,-13,7,-78, 
  /* [31][0][][] */ 30,-105,-5,45,6,14,-75,-105,-56,24,-91,-90,43,-127,-70,53,-80,-100,63,6,16,-4,-56,49,8,-108,-4,-3,-87,-87,9,49,-19,-18,-102,-40,43,-36,-82,-117,23,-79,-52,-9,-28,-73,-56,-16,24,62,40,-60,-118,-79,-83,-13,-112,20,-23,57,-63,-35,34,-86,21,52,-65,-94,22,-122,-124,-24,-107,-2,-30,-26,-79,-64,5,37,-91,-64,16,25,9,41,-105,-18,-12,-64,-95,-75,-8,43,-35,-40, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021289796568453312, 0.0017038587247952819, 0.002161872573196888, 0.0020646157208830118, 0.0018629905534908175, 0.0022490208502858877, 0.0021890192292630672, 0.0023563948925584555, 0.0022641674149781466, 0.0032838459592312574, 0.0024631572887301445, 0.0026002128142863512, 0.0023038117215037346, 0.0020809581037610769, 0.0020876273047178984, 0.0021118249278515577, 0.0020490917377173901, 0.002259301720187068, 0.0023331420961767435, 0.0022730708587914705, 0.002078360179439187, 0.0019300651038065553, 0.002681769197806716, 0.0021549840457737446, 0.0020224058534950018, 0.0023994406219571829, 0.0025311065837740898, 0.002138662151992321, 0.0041052852757275105, 0.0023934673517942429, 0.0018850179621949792, 0.0023869674187153578, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1160, -263, 3472, 9809, 6512, -3139, 4547, -2989, -2997, -565, 9613, -4480, 4211, 6791, 1781, 3017, -596, -566, -1908, 5355, 2867, -1480, 3399, -859, -930, 4206, 542, 2429, 9297, 2281, 4779, 1002, 1827, 4730, 8049, 3797, -1098, 3504, 2239, -4753, 516, 1506, 510, 2025, -1652, 202, -1417, 721, -6997, 2622, 1312, -4426, 7313, -1139, 2451, 1588, 1154, 2080, -1304, -2690, 216, 893, 372, 5449, 5671, 3045, 3828, 5521, 4809, -1299, 3916, 6791, 3244, -1766, 6117, 8129, 30, -4291, 568, 1430, 11757, 2131, -367, -1991, 17, 388, 1596, -5093, 4196, -920, 4646, 1292, 514, -4284, -328, 1059, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0001069131467374973, 0.00015010884089861065, 0.00014809345884714276, 7.2361406637355685e-05, 9.6234791271854192e-05, 0.00015215713938232511, 0.00012474600225687027, 0.0001137380168074742, 0.00013286386092659086, 0.00024272946757264435, 6.5846390498336405e-05, 0.00011462961992947385, 0.00012388087634462863, 8.2310107245575637e-05, 0.00013961545482743531, 0.00014897808432579041, 0.00019563041860237718, 0.00018860898853745311, 0.00014309848484117538, 0.00010693087097024545, 0.0001450206182198599, 0.00011647360952338204, 9.1509857156779617e-05, 0.00018320587696507573, 0.00023294419224839658, 0.00014875514898449183, 0.00016482402861583978, 0.00013686830061487854, 7.4793853855226189e-05, 0.00017925439169630408, 0.00012077089195372537, 0.00015004031592980027, 0.00015479946159757674, 0.00012922952009830624, 8.1046237028203905e-05, 0.00012553801934700459, 0.0001255375100299716, 0.00011543236178113148, 0.00013271585339680314, 0.00011144451127620414, 0.00019321040599606931, 9.8509422969073057e-05, 0.00014273051056079566, 0.00011271517723798752, 0.00013929302804172039, 0.0001534982438897714, 0.00019176001660525799, 0.00015295787306968123, 0.00010030699195340276, 0.00011924246791750193, 0.00012125625653425232, 0.00011663085024338216, 8.9645764091983438e-05, 0.00014577413094229996, 0.00011172923404956236, 0.00012273988977540284, 0.00019056792370975018, 0.00013302367005962878, 0.0001714795216685161, 0.00013430294347926974, 0.00019663874991238117, 0.00014085191651247442, 0.00025541198556311429, 0.00010511919390410185, 0.00010583199764369056, 0.00013528193812817335, 0.00010207504237769172, 0.00011088735482189804, 0.00013049127301201224, 0.00012194451119285077, 0.00010798497532960027, 9.8326352599542588e-05, 0.00013555848272517323, 0.00013286825560498983, 0.00011255915887886658, 8.9904788183048368e-05, 0.00014023261610418558, 0.00014605585602112114, 0.00014484219718724489, 0.00012353948841337115, 6.866526382509619e-05, 0.00016790934023447335, 0.00020034456974826753, 0.00017752277199178934, 0.00011377499322406948, 0.00013626615691464394, 0.00014618747809436172, 0.00010171654139412567, 0.00014022369578015059, 0.00016840205353219062, 0.00011826187983388081, 0.00015868450282141566, 0.00014458417717833072, 0.00011054126662202179, 0.00020980941189918667, 0.00013685946760233492, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 7,101,-121,54,32,-39,97,74,-19,6,41,-87,79,127,-55,15, 
  /* [1][0][][] */ -24,1,-54,-47,-12,45,37,-127,11,-31,-27,-54,-27,-56,-49,9, 
  /* [2][0][][] */ -25,-20,36,69,21,31,-109,127,-11,18,67,-44,-6,-62,-36,49, 
  /* [3][0][][] */ 121,-76,74,7,13,-14,-50,127,-49,101,61,28,10,97,41,-27, 
  /* [4][0][][] */ -51,-31,-11,91,-118,13,-41,-95,13,-15,54,14,64,47,100,127, 
  /* [5][0][][] */ 125,34,-33,-41,-78,18,37,91,6,0,50,92,127,36,-77,-2, 
  /* [6][0][][] */ 31,-42,-80,-41,-104,7,15,-53,-35,-53,-43,25,78,63,127,-29, 
  /* [7][0][][] */ -44,60,-54,-82,-6,-65,-93,1,-127,58,-59,-79,-127,-21,34,108, 
  /* [8][0][][] */ 32,34,65,-6,38,22,77,-2,52,-31,43,14,-127,-44,-88,22, 
  /* [9][0][][] */ -32,26,24,-18,-30,-18,13,7,-23,47,-20,26,40,127,23,22, 
  /* [10][0][][] */ 80,37,-117,44,-66,-47,66,-75,-55,-68,-40,-94,-93,-106,-5,127, 
  /* [11][0][][] */ 58,11,61,2,-37,-48,-10,118,-102,27,-39,-3,6,-17,89,127, 
  /* [12][0][][] */ -87,-26,23,-22,15,14,127,25,-47,20,-8,-1,-37,51,-64,95, 
  /* [13][0][][] */ -1,49,23,33,74,124,127,88,-26,116,-109,-91,-2,87,-122,-38, 
  /* [14][0][][] */ -89,127,14,-5,6,7,51,4,-60,46,95,-30,-80,46,-14,32, 
  /* [15][0][][] */ 1,0,-127,-58,72,-53,-93,-48,-27,-18,-26,-83,2,-70,-48,48, 
  /* [16][0][][] */ 103,-39,0,9,18,-33,50,-15,-12,-8,127,69,69,-8,-54,39, 
  /* [17][0][][] */ 2,1,-29,-55,-23,-50,127,-120,9,-35,-22,57,32,56,-16,62, 
  /* [18][0][][] */ 29,127,-27,-32,66,-62,-6,-77,-34,127,-11,7,-40,70,-8,3, 
  /* [19][0][][] */ -71,-109,78,-45,12,-127,32,1,45,21,99,125,20,-20,42,-14, 
  /* [20][0][][] */ -30,81,40,-3,-12,-8,33,-17,59,-18,109,-5,-127,-43,-94,7, 
  /* [21][0][][] */ -35,45,4,33,82,53,37,66,-127,66,-31,3,14,46,-35,-55, 
  /* [22][0][][] */ -3,-111,69,52,-13,-127,123,40,23,-64,-35,-54,14,-126,-77,-38, 
  /* [23][0][][] */ -50,-99,27,59,35,-30,24,-18,35,-38,72,27,5,38,51,127, 
  /* [24][0][][] */ 6,1,45,63,59,18,-56,-127,58,26,-53,12,-11,6,-18,-43, 
  /* [25][0][][] */ -8,-5,20,-54,-38,-18,-6,3,1,79,-62,-8,52,127,24,-30, 
  /* [26][0][][] */ -45,58,-9,33,18,-82,12,-36,26,25,22,68,19,12,-67,127, 
  /* [27][0][][] */ -38,-123,-26,5,-73,102,16,-51,5,-40,63,-8,8,-65,-127,-6, 
  /* [28][0][][] */ -30,1,21,103,30,4,-47,-86,-127,61,100,12,75,32,-12,-6, 
  /* [29][0][][] */ -127,93,-15,-39,-28,36,-96,-62,-44,-28,-3,8,-8,-66,-108,61, 
  /* [30][0][][] */ 57,92,-39,53,-89,-63,-65,-6,-46,-1,-27,-127,71,48,7,68, 
  /* [31][0][][] */ 127,43,-76,-1,-27,31,62,51,-63,8,40,22,70,42,2,-12, 
  /* [32][0][][] */ -64,-33,127,-14,-30,99,88,16,-22,-6,-8,35,-10,63,51,29, 
  /* [33][0][][] */ -18,14,-55,-53,-37,36,127,33,-1,-17,45,-30,67,97,-70,41, 
  /* [34][0][][] */ -127,-52,91,2,18,-78,118,-17,-109,23,66,-16,52,36,-78,-26, 
  /* [35][0][][] */ 5,7,-83,7,-64,112,-46,12,4,127,0,98,-76,38,10,20, 
  /* [36][0][][] */ -17,-82,127,-40,-51,3,-37,13,19,29,-49,107,-4,-86,-43,56, 
  /* [37][0][][] */ 71,1,80,-45,110,-65,-46,5,-55,127,-81,-12,-109,-52,105,-61, 
  /* [38][0][][] */ 59,62,23,-91,-2,-22,-86,39,-85,75,-127,-75,-73,-81,-66,-4, 
  /* [39][0][][] */ -94,16,-35,-40,-80,-108,67,3,-127,-45,34,98,25,-18,-14,60, 
  /* [40][0][][] */ 127,-12,-11,-70,-69,5,1,19,19,-29,-55,-66,26,11,28,47, 
  /* [41][0][][] */ 121,-58,-67,-51,-8,2,-70,-13,83,-22,-7,-79,127,-68,75,-48, 
  /* [42][0][][] */ -32,-111,-15,127,0,-114,-100,24,17,-12,17,70,-74,62,-83,15, 
  /* [43][0][][] */ -80,-61,-36,-100,-59,-21,-18,108,51,-127,-26,56,-3,-55,-31,103, 
  /* [44][0][][] */ -33,14,33,24,-31,-77,10,101,123,-77,78,127,102,22,-38,11, 
  /* [45][0][][] */ 44,86,-31,91,127,-83,-49,-78,86,-52,36,-82,-33,32,-52,36, 
  /* [46][0][][] */ -3,-48,1,19,70,-45,36,46,-5,127,-8,-91,45,49,-43,94, 
  /* [47][0][][] */ 76,-63,-28,-25,86,-48,-57,-42,3,127,-37,44,-10,-125,-81,5, 
  /* [48][0][][] */ 14,17,-45,-127,-3,-43,98,-90,11,-5,1,55,52,43,11,37, 
  /* [49][0][][] */ -29,118,-74,71,78,-49,70,40,-27,28,44,-106,-3,62,127,-105, 
  /* [50][0][][] */ 29,62,-30,13,-127,-4,-90,-65,59,105,21,17,-26,-33,21,26, 
  /* [51][0][][] */ 127,-62,-76,-7,-42,116,-95,-22,60,-18,-33,94,-28,-70,-7,40, 
  /* [52][0][][] */ -17,-47,27,72,-62,-93,-127,-23,-37,-44,-52,-95,7,-54,34,25, 
  /* [53][0][][] */ 2,83,49,-127,-3,113,105,-26,-19,-32,-5,-25,60,-127,-14,56, 
  /* [54][0][][] */ 33,127,-25,-48,-16,-80,-91,24,-22,-31,-25,99,70,94,24,47, 
  /* [55][0][][] */ -12,10,41,48,59,-23,67,80,-87,16,-2,-21,127,61,21,-19, 
  /* [56][0][][] */ 127,-18,5,13,-52,108,-62,-53,15,57,-83,12,-65,75,-14,18, 
  /* [57][0][][] */ -27,-25,-53,-13,-67,-92,56,-14,-127,-2,80,63,23,44,-7,41, 
  /* [58][0][][] */ 63,-24,26,32,12,-70,-31,9,24,-3,-127,-37,34,-12,-15,24, 
  /* [59][0][][] */ 66,15,-127,67,-10,1,70,-17,-57,-25,28,-88,-88,-60,34,77, 
  /* [60][0][][] */ -16,15,-19,27,-16,-11,-5,17,-27,-66,65,127,-48,-104,-49,11, 
  /* [61][0][][] */ -1,44,82,-51,-95,50,-25,127,-40,-43,37,22,85,26,39,64, 
  /* [62][0][][] */ 64,32,-19,-127,-15,13,13,-47,0,29,-28,56,22,-33,-90,-73, 
  /* [63][0][][] */ -6,-20,-8,20,-63,-66,-55,24,-60,7,-34,-13,127,1,59,-24, 
  /* [64][0][][] */ 49,29,-19,70,-66,-39,-45,-67,54,127,4,-26,40,-16,-2,72, 
  /* [65][0][][] */ -16,-1,-30,16,-85,53,2,1,73,-118,121,-37,60,55,-127,57, 
  /* [66][0][][] */ -84,98,-90,-102,36,-23,-127,-101,-105,118,73,-31,-86,-36,72,28, 
  /* [67][0][][] */ 14,-11,-127,-79,61,74,-5,-22,-39,10,34,-33,33,52,28,23, 
  /* [68][0][][] */ 61,24,-19,-23,-67,16,0,40,-56,55,127,-16,4,-22,-84,24, 
  /* [69][0][][] */ 59,-111,66,-29,23,-127,-26,124,27,57,76,84,-7,37,-37,13, 
  /* [70][0][][] */ 58,5,107,87,89,-24,127,60,45,21,-44,71,-55,77,-92,47, 
  /* [71][0][][] */ -3,30,98,-92,-127,-71,24,4,-29,-11,15,-106,-94,-10,3,19, 
  /* [72][0][][] */ -71,-105,19,-113,69,5,10,40,-47,12,-127,-29,41,78,-58,100, 
  /* [73][0][][] */ 12,25,57,-25,118,-108,-55,21,-41,95,-77,46,-90,-73,127,-25, 
  /* [74][0][][] */ -127,-23,-117,-80,52,-25,-21,35,-68,0,-116,-16,-57,-90,-59,88, 
  /* [75][0][][] */ 91,-20,53,-51,20,10,-127,-30,-12,-83,48,-1,-10,-17,0,-22, 
  /* [76][0][][] */ 20,-32,-38,108,28,65,90,-80,50,-73,78,127,50,-54,-33,53, 
  /* [77][0][][] */ -53,-53,127,-15,11,-44,-9,-104,5,7,33,82,43,15,-5,16, 
  /* [78][0][][] */ -68,5,13,-34,-18,-25,46,3,1,-16,26,-55,-109,-59,-127,-25, 
  /* [79][0][][] */ -127,-91,-38,29,112,42,-1,32,17,24,1,96,-48,-93,-91,0, 
  /* [80][0][][] */ -9,-112,34,127,-40,-32,-103,78,21,16,80,28,-61,-25,-37,64, 
  /* [81][0][][] */ 78,48,-11,61,-4,47,30,127,58,-11,97,54,89,39,38,-24, 
  /* [82][0][][] */ -39,-1,-1,-15,24,-124,-127,-78,0,71,-21,-16,-18,112,-54,-37, 
  /* [83][0][][] */ 103,-19,78,-10,-27,-15,-127,25,44,-90,11,-47,2,11,13,-31, 
  /* [84][0][][] */ 63,-36,-82,41,127,5,7,51,-116,52,-84,-14,80,-3,-19,5, 
  /* [85][0][][] */ 5,58,13,-8,89,-15,50,-102,127,-42,56,6,106,-98,0,10, 
  /* [86][0][][] */ 113,-40,127,63,-10,-66,68,48,-50,-62,-78,-30,38,15,-63,23, 
  /* [87][0][][] */ 18,42,41,-94,118,-44,-78,32,63,-21,71,-66,-119,-127,19,1, 
  /* [88][0][][] */ -56,-19,46,12,21,38,-73,-35,-12,31,-86,-127,-48,-23,-10,-37, 
  /* [89][0][][] */ -59,25,39,-71,36,18,-127,-3,63,38,-75,-27,-27,-60,-25,-42, 
  /* [90][0][][] */ -17,-22,-59,-79,127,3,-75,59,76,72,58,-3,37,16,-76,-41, 
  /* [91][0][][] */ -43,-61,39,46,-22,-17,-19,71,-31,-67,39,-28,1,65,7,127, 
  /* [92][0][][] */ -38,54,3,2,-24,53,-105,53,-39,-40,89,29,-22,127,45,19, 
  /* [93][0][][] */ 14,89,-54,-86,66,66,-91,3,57,83,82,47,-127,48,-23,62, 
  /* [94][0][][] */ 35,68,71,16,-127,-39,-4,-10,20,-11,16,-27,-34,-1,25,-30, 
  /* [95][0][][] */ 4,36,-2,3,75,-25,-80,76,-9,23,-49,97,-14,-1,127,-1, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0013224404538050294, 0.0018567407969385386, 0.0018318119691684842, 0.00089505972573533654, 0.0011903566773980856, 0.0018820767290890217, 0.0015430202474817634, 0.0014068592572584748, 0.0016434324206784368, 0.0030023928266018629, 0.00081447348929941654, 0.0014178877463564277, 0.0015323193510994315, 0.0010181181132793427, 0.0017269450472667813, 0.0018427540780976415, 0.0024198107421398163, 0.0023329604882746935, 0.0017700276803225279, 0.0013226596638560295, 0.001793803065083921, 0.0014406966511160135, 0.0011319125769659877, 0.0022661278489977121, 0.0028813558164983988, 0.0018399965483695269, 0.0020387573167681694, 0.0016929645789787173, 0.00092514738207682967, 0.0022172506432980299, 0.0014938509557396173, 0.0018558931769803166, 0.0019147604471072555, 0.0015984781784936786, 0.0010024849325418472, 0.0015528169460594654, 0.0015528106596320868, 0.0014278171584010124, 0.0016416017897427082, 0.0013784902403131127, 0.0023898768704384565, 0.0012184922816231847, 0.0017654759576544166, 0.0013942074729129672, 0.0017229567747563124, 0.0018986652139574289, 0.0023719365708529949, 0.0018919813446700573, 0.0012407269096001983, 0.0014749454567208886, 0.0014998546103015542, 0.0014426416018977761, 0.0011088550090789795, 0.0018031233921647072, 0.0013820120366290212, 0.0015182060888037086, 0.0023571911733597517, 0.0016454092692583799, 0.0021210811100900173, 0.0016612330218777061, 0.0024322830140590668, 0.0017422391101717949, 0.0031592664308845997, 0.0013002505293115973, 0.0013090673601254821, 0.001673342427238822, 0.0012625964591279626, 0.00137159856967628, 0.0016140851657837629, 0.0015083678299561143, 0.0013356981799006462, 0.0012162277707830071, 0.0016767630586400628, 0.0016434867866337299, 0.0013922776561230421, 0.0011120589915663004, 0.0017345787491649389, 0.0018066082848235965, 0.0017915960634127259, 0.0015280966181308031, 0.00084934104233980179, 0.0020769203547388315, 0.0024781213141977787, 0.0021958318538963795, 0.0014073166530579329, 0.0016855164431035519, 0.0018082362366840243, 0.0012581620831042528, 0.0017344685038551688, 0.0020830149296671152, 0.0014628162607550621, 0.0019628156442195177, 0.0017884046537801623, 0.00136731774546206, 0.002595194848254323, 0.0016928552649915218, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 8806, 1292, 5595, -955, -46, 4954, 6342, 1681, 18279, -14397, -7130, 7237, -13221, 15137, -2280, 19363, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.4222470023669302e-05, 6.1279708461370319e-05, 3.9726804970996454e-05, 6.841171853011474e-05, 5.6810858950484544e-05, 0.0001059383648680523, 4.512584928306751e-05, 5.9661044360836968e-05, 8.8408916781190783e-05, 5.9574755141511559e-05, 5.6684089940972626e-05, 7.9598001320846379e-05, 6.6238157160114497e-05, 5.3102972742635757e-05, 6.293274782365188e-05, 6.9607747718691826e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -105,58,94,-44,-56,-37,-126,-33,-42,40,6,-62,39,46,46,-26,38,18,109,8,15,-67,122,111,51,16,-5,31,-61,-127,-51,15,-61,-56,41,14,24,-22,0,-1,4,-21,-76,11,-80,-21,12,88,14,-44,-27,-19,-36,24,93,-61,-83,47,12,85,68,-9,13,4,-43,-74,-77,12,-61,-74,7,-7,21,8,-94,-47,-69,42,-71,-3,-75,57,106,-97,10,72,37,43,77,14,11,-21,-32,-27,-96,37, 
  /* [1][0][][] */ 65,52,50,-39,-58,-20,-19,43,-15,45,74,-35,12,-22,-58,-29,11,11,-52,50,-28,-118,30,86,23,-75,16,-23,67,-98,96,-85,83,60,-11,63,52,81,-7,-70,61,22,11,-42,-4,60,-127,-38,-37,-43,14,-36,29,-27,-23,38,45,32,-1,9,51,44,26,-72,-22,6,-61,12,-30,-8,-110,-11,-12,-3,37,-84,19,44,51,-41,15,-19,-84,-63,63,-32,-8,12,-55,-36,-52,35,0,81,-51,61, 
  /* [2][0][][] */ 56,-56,3,35,8,-70,85,-9,-29,-37,-37,-29,-80,-28,6,-59,-94,-30,-56,23,17,-28,-74,-3,-6,-90,-19,-23,-28,57,-41,99,-69,102,-28,-7,-47,-50,-31,-8,-127,108,47,44,-72,-17,-10,-33,7,-10,-59,-44,79,-12,-22,60,7,-35,12,17,-1,88,-60,5,94,50,13,-14,35,31,-33,-14,19,20,77,50,44,-103,102,63,44,-46,-44,54,-81,17,-6,75,-18,22,-36,40,-37,26,6,5, 
  /* [3][0][][] */ -2,-16,-5,-6,25,-7,-17,-82,-13,55,40,28,49,-5,-44,60,-5,-24,25,8,39,127,31,-38,8,21,-20,-2,63,-27,89,2,-27,21,-19,-34,5,25,26,3,-67,-31,-45,31,-14,23,14,4,-8,-43,-3,-10,34,-74,7,-35,8,105,-5,17,-9,-19,-63,3,32,31,-41,4,1,-4,18,-57,-19,-49,13,-26,4,15,-37,-34,-53,-1,-32,22,3,-28,51,-22,13,32,31,-14,62,16,-42,67, 
  /* [4][0][][] */ 27,29,-68,20,24,6,-56,16,-33,94,99,3,-13,4,6,-65,15,-1,-45,34,12,-37,52,66,-73,12,-127,8,-49,-58,-12,-12,-49,-43,17,63,31,43,28,26,-47,-29,42,-12,1,16,-8,49,-27,70,3,24,46,-3,-70,21,36,-31,-3,-10,42,-9,46,4,-59,6,-27,21,-25,18,-37,47,26,-59,-43,-38,42,-51,-14,-10,-27,93,-82,-7,-18,22,18,-41,63,1,40,7,-54,-19,30,0, 
  /* [5][0][][] */ -60,33,18,5,32,-18,68,-6,-39,14,-8,7,20,-15,-11,-81,-1,-51,33,34,-107,-36,-61,21,-19,24,18,20,29,-68,-39,47,56,120,-11,41,5,27,46,-24,-10,70,75,-54,-16,62,50,6,10,19,-12,15,17,-20,9,-80,24,-76,-56,-68,29,75,-18,6,70,-43,-68,-53,-58,11,-50,-25,-12,38,-15,-31,33,-19,-28,-14,127,-1,-1,-103,-47,12,-7,-9,-54,-2,20,-4,-23,15,25,58, 
  /* [6][0][][] */ 20,-56,-112,58,-36,-93,121,105,-97,43,-50,107,-113,-66,76,39,-8,-58,-21,-17,5,19,-83,-100,-52,68,60,58,49,68,66,-88,12,5,25,-51,27,17,30,65,-9,21,-53,-31,-2,-84,-60,10,-4,-121,-35,91,77,-2,-59,-66,35,4,-26,0,-127,62,-110,6,17,21,22,52,60,14,24,-85,-63,-1,84,-7,92,-65,45,-62,-1,-77,-91,99,16,-82,19,29,-86,55,16,45,-9,-12,2,88, 
  /* [7][0][][] */ 13,71,-21,-60,-17,4,4,-21,-30,36,-35,-79,-8,11,10,20,-47,-29,-28,30,2,127,16,32,-6,-14,31,8,45,52,97,-12,60,6,-26,4,-3,-18,-14,41,-53,-8,1,-47,41,-51,54,-10,37,-57,-80,-7,-62,-6,13,3,20,43,-74,16,-8,94,-11,-27,-28,-1,-45,10,-23,-19,-84,55,28,41,-49,39,-68,48,-8,-75,-51,-39,73,-57,22,-10,-6,7,10,96,-62,44,66,-30,-63,15, 
  /* [8][0][][] */ -32,34,-48,31,-12,-35,-67,5,-96,-46,9,9,-33,41,27,45,14,-54,-13,-7,26,12,1,-31,-44,73,-3,1,-17,-50,-43,-18,-12,-32,-12,-67,-69,4,44,28,-20,-37,15,5,-46,-23,-4,-13,-55,3,31,57,14,4,-72,79,-44,11,-4,-18,-24,20,30,48,-16,-56,-34,-8,-44,0,0,-1,-40,-47,-105,0,-27,22,-43,-17,-43,21,-52,-11,2,3,8,40,-7,46,-50,-35,-82,-127,30,-50, 
  /* [9][0][][] */ 27,64,-76,30,-22,-26,49,54,16,70,4,89,3,-15,34,127,24,10,82,23,25,-20,59,-51,3,7,29,-2,13,-38,31,62,-9,21,-1,-89,61,-29,-28,-35,6,1,62,-47,-7,11,16,39,82,99,46,-3,-84,-43,37,10,40,30,78,-23,-67,24,-41,-18,68,-26,-42,9,-65,37,17,59,16,85,8,-8,-41,47,-65,-32,74,-12,63,-33,39,11,-5,-41,-14,4,24,-2,52,53,-64,12, 
  /* [10][0][][] */ 57,-30,-44,-12,-18,-16,45,-24,29,-25,-27,-8,-75,-28,21,27,-99,-22,1,17,57,62,28,-6,-42,74,26,-17,-44,-67,-16,6,57,-60,37,4,59,-74,60,127,8,-58,0,-4,1,-118,-15,69,16,84,-84,-25,-33,13,22,65,6,-51,78,69,-19,46,-103,-23,-8,-50,30,54,57,-37,8,42,124,9,27,-117,18,-53,42,-10,-76,32,40,53,-58,0,15,41,-39,9,17,63,72,57,-36,8, 
  /* [11][0][][] */ -40,-54,13,-45,17,-5,-21,-61,25,-25,-21,-23,-12,-8,0,17,-60,-19,52,2,-34,51,-59,-75,25,-17,-31,35,30,-55,26,-22,14,-22,13,-49,-59,17,-104,13,-52,58,-27,23,21,-14,-12,-20,-3,-28,-59,-36,22,4,37,-32,-33,-52,17,-24,-22,-34,-38,-90,23,-47,69,68,127,-10,93,-8,-12,-46,30,-37,64,-19,23,49,-12,-14,-30,101,61,8,3,-22,-50,-36,-13,21,57,24,57,67, 
  /* [12][0][][] */ 54,-7,2,-59,29,78,-35,23,60,90,19,38,32,46,-9,10,-41,48,15,56,127,-12,39,-48,18,31,-36,-84,-27,69,18,24,36,-8,18,-16,47,-35,-23,-10,23,-17,27,43,-24,34,-19,-19,-38,28,13,25,-51,-28,5,17,-1,101,12,48,8,-103,20,-101,-29,65,-34,-24,4,-64,51,8,-28,-7,-24,59,-27,55,-106,-39,-41,41,103,3,-21,82,23,-81,106,-1,-64,44,65,33,-42,-57, 
  /* [13][0][][] */ -15,28,-11,-55,-38,-15,-20,-67,16,-30,-22,-104,66,-92,-59,-78,15,-20,-69,-35,-68,-54,21,109,-26,14,120,3,30,-47,83,71,19,-15,-105,127,-30,-80,10,-64,116,-4,-12,23,-24,-93,58,-30,69,-11,-48,28,-13,-2,31,83,70,-27,-11,-20,41,13,-6,-98,-26,39,-47,20,-56,-60,-71,12,-79,17,-34,-62,-125,17,7,68,-43,27,77,-84,54,51,48,-28,4,-8,4,12,-57,14,-39,9, 
  /* [14][0][][] */ 18,52,-62,-31,106,87,-121,-19,57,-25,105,-23,16,-8,-44,-55,-51,12,54,127,3,-59,32,46,-3,27,-18,64,21,-26,-13,31,71,3,-37,-6,-15,44,73,-15,69,-17,34,-11,-18,-28,48,-28,60,2,-4,-27,15,16,16,37,58,106,-65,-14,-12,-104,-30,-106,4,-51,-75,0,-76,55,-27,57,18,-36,-28,-11,25,19,-76,-32,13,18,9,-46,-8,68,12,-41,-2,73,85,0,-8,-21,-69,-39, 
  /* [15][0][][] */ -77,-76,9,-49,0,-18,-19,-82,-15,4,-19,48,-3,-12,6,70,-85,-11,-5,-80,43,-1,-29,-105,8,0,42,-49,-67,-65,-59,13,-57,14,60,-69,-24,-34,2,11,-26,-7,9,-5,2,-28,54,83,-72,-9,-6,-43,-32,9,-17,-40,-107,-44,59,14,-45,26,-106,-4,-73,22,16,5,79,-69,90,-20,29,-46,-38,-49,2,-2,29,15,-37,61,64,52,-25,-14,-127,15,-25,-20,-83,29,47,-48,-23,39, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0018794549396261573, 0.0026043874677270651, 0.0016883892240002751, 0.0029074980411678553, 0.0024144614581018686, 0.0045023802667856216, 0.0019178484799340367, 0.0025355943944305182, 0.0037573787849396467, 0.002531927078962326, 0.0024090737570077181, 0.0033829149324446917, 0.0028151215519756079, 0.0022568763233721256, 0.0026746417861431837, 0.0029583291616290808, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -5120, -1876, -5295, -6401, -2204, 5453, -7198, -4267, -1616, -7976, 7325, -1206, 31, 8447, 10697, -4971, 7402, -1648, -6171, -687, -2745, -2181, 263, -265, 334, -4160, 4055, -2676, -3837, -8539, -43, 1759, 20285, -910, -4183, -408, -775, -2292, 250, 9465, -2146, -2546, -941, -3789, 20047, 17598, -500, 7814, -5518, 9032, 9254, -4008, -1002, -3231, 340, 8684, -451, 453, 18672, 9193, 8401, 14202, 3400, -15282, -3134, 327, -1523, 2697, -5972, -933, 2986, -3783, 10683, 1757, -38, 10356, -2875, 85, 4818, 5014, -2283, 12611, -2770, 708, 12476, 654, -2044, -3982, -7669, -8963, 15034, 572, 395, 284, -8436, -7431, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00019042454368900508, 0.00019353769312147051, 8.2322963862679899e-05, 0.00013442669296637177, 0.00026271314709447324, 0.00026843094383366406, 0.00024033919908106327, 0.00014461917453445494, 0.00020997141837142408, 0.0001430917764082551, 0.00016038886678870767, 0.00035183891304768622, 0.00026228904607705772, 0.0001279744174098596, 0.00010228902101516724, 0.00015196338063105941, 0.00012756719661410898, 0.00023450053413398564, 0.00012078014697181061, 8.9135413873009384e-05, 0.00017112729256041348, 0.00033413845812901855, 0.00021208288671914488, 0.00020175598911009729, 0.00096912437584251165, 0.0002105095045408234, 0.00025451288092881441, 0.00016947720723692328, 0.00022523461666423827, 8.7419786723330617e-05, 0.00029023451497778296, 0.00018899893620982766, 0.00011726735829142854, 0.00017203795141540468, 0.0002155996480723843, 0.00028595258481800556, 0.00015681418881285936, 0.00025313571677543223, 0.00036973110400140285, 9.3624650617130101e-05, 0.00018144494970329106, 0.00015862761938478798, 0.00017363102233503014, 0.00013954027963336557, 7.1393318648915738e-05, 8.7138156231958419e-05, 0.00016342799062840641, 0.00011353885201970115, 0.00015192602586466819, 9.4976574473548681e-05, 0.00014636553532909602, 0.00013401547039393336, 0.00011626976629486308, 0.00012827572936657816, 0.00024540163576602936, 0.0001745704939821735, 0.00022696641099173576, 0.00031580578070133924, 8.7210930360015482e-05, 0.0001084482209989801, 0.00014127945178188384, 0.00013916241005063057, 0.00017795577878132463, 8.9053944975603372e-05, 0.00017807273252401501, 0.00023712651454843581, 0.0004190558975096792, 0.00022186280693858862, 0.00021812407067045569, 0.00023730484826955944, 0.0002737702161539346, 0.00015908741625025868, 7.9925870522856712e-05, 0.00024050528008956462, 0.00026090707979165018, 0.00011400847142795101, 0.00012182167120045051, 0.0001370558311464265, 0.00023934851924423128, 0.00011283446656307206, 0.00031857503927312791, 9.2198410129640251e-05, 0.00025892071425914764, 0.0002002736582653597, 7.7608216088265181e-05, 0.00015309335140045732, 0.00014152763469610363, 0.00015302585961762816, 0.0002115060924552381, 0.00012207582767587155, 8.2078338891733438e-05, 0.00028226713766343892, 0.00020739424508064985, 0.00024451871286146343, 7.494082092307508e-05, 0.00017197486886288971, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 33,108,21,17,-27,-17,78,51,73,-60,-78,4,-29,-24,7,-18,-127,30,53,87,64,82,73,126,8,13,-42,-20,36,64,21,-28,-100,-3,-19,57,-10,72,-5,-59,29,-33,29,-25,-127,-87,51,-31,-14,-57,17,1,60,93,-20,-4,-90,-54,-64,-113,-65,12,-28,51,25,32,73,-22,17,56,27,-35,-86,11,46,26,58,-62,-51,26,12,-77,70,-17,10,-57,18,75,-76,42,-68,47,109,12,127,9, -28,51,22,78,2,102,13,41,120,31,61,127,-43,-8,-127,85,-26,67,71,127,111,-11,127,91,39,37,3,36,25,102,-8,-127,74,127,13,86,100,78,-38,-60,127,10,127,91,-62,-127,127,-41,43,-127,-118,-7,45,127,-5,-127,23,42,-118,-119,-32,-53,1,127,-21,86,113,-38,31,127,110,3,-52,13,-30,-127,96,-101,18,127,-24,19,127,-68,-92,-77,109,118,127,127,-87,10,108,-27,68,15, 35,-104,27,-6,-22,-32,39,110,12,90,-105,19,4,19,-42,-7,-70,39,-16,71,50,84,15,127,3,-33,0,14,60,77,-16,-55,-70,-60,-15,127,-30,54,19,-107,27,56,31,12,-63,-55,18,-5,66,-27,47,11,80,36,36,11,58,-81,-73,-127,-127,-13,-86,42,74,20,-13,-14,5,22,47,60,-10,-35,-8,-13,60,7,-75,-50,-8,-104,28,-16,1,-32,31,9,-80,21,5,26,54,53,115,16, 
  /* [0][1][][] */ 117,10,112,127,12,-73,127,67,-29,-79,-88,82,-5,-127,10,27,-61,-27,119,49,-102,-3,-101,-99,-25,55,-127,127,-21,96,127,51,-12,85,30,69,-127,112,-30,-51,76,-93,5,77,-99,-87,3,-56,-121,-31,-55,-6,90,-29,77,-22,-127,-5,-84,36,-42,-78,-5,35,-90,-18,127,-82,-42,20,-77,-85,-109,36,126,-74,88,98,-44,-92,127,-45,-3,127,6,13,-57,127,25,69,-80,5,-22,-93,108,-1, -127,14,-38,63,-53,-127,-119,-127,127,21,38,-4,-71,-79,-31,127,-74,-127,127,65,-13,-127,-73,70,-127,127,13,67,-64,-19,-113,69,-127,66,127,-43,56,127,127,-127,-59,63,6,45,-26,-56,-120,-127,60,-106,-67,127,46,61,40,-58,26,12,81,-16,-41,41,-127,114,-3,-127,46,127,7,37,-127,-30,-64,25,-127,-93,127,127,127,-90,-43,79,-78,48,-127,-91,127,117,110,94,-127,-127,-127,-60,23,127, 77,1,107,85,22,-38,18,61,-70,127,-127,47,-1,-20,-86,68,49,-5,-3,22,-127,21,-106,-71,1,37,82,1,127,127,5,-101,-52,-114,12,81,-107,33,-60,-24,2,127,32,127,-96,-69,-10,-32,127,-5,-33,17,127,-54,-127,5,60,-12,-127,94,-26,-83,-1,120,127,-38,36,-57,-40,-4,-56,-1,-127,-127,-32,-99,2,10,-58,-95,-42,-65,17,114,-112,24,-38,-22,-8,13,12,30,-19,127,73,10, 
  /* [0][2][][] */ 79,-127,85,27,5,1,72,55,-65,-11,16,-36,26,-25,-5,-17,-8,37,10,28,47,44,-18,-80,-2,-6,-37,-29,-17,11,19,-10,-63,4,-12,-28,95,19,-2,-61,32,-32,0,-102,-17,-55,3,37,18,21,21,16,7,7,-37,22,-33,8,18,42,10,-86,50,9,-34,31,-91,-3,33,6,30,61,59,-15,14,-6,12,-45,-46,-62,39,-42,-4,-18,36,52,-63,23,-18,82,-15,-5,-21,-26,40,14, -36,27,127,29,127,66,-5,38,-97,17,12,-80,127,11,-112,-39,85,37,-31,-16,46,-3,84,-54,64,-49,-32,5,-4,68,-9,-18,-79,26,16,-43,66,68,7,-120,-13,-2,-127,14,-57,7,-30,-32,38,-91,-47,67,126,-69,-3,-72,10,127,-5,-13,41,-127,108,115,-17,18,-53,21,127,5,29,123,-79,14,-14,-24,47,-101,-27,-52,5,-102,-40,-66,-97,127,-6,55,123,33,24,32,-45,-50,53,19, 28,56,61,-8,-9,-34,39,86,4,89,-7,-34,29,-15,-18,40,57,43,-31,22,29,41,-30,-77,30,30,-20,-6,2,16,-38,-89,-97,2,1,-16,58,-9,-9,-43,14,-2,54,-1,-123,-47,-31,5,3,24,-127,22,43,-4,-2,11,9,-1,-28,44,-16,-65,40,19,46,18,-23,34,48,-30,-9,127,56,-43,-11,-24,-2,-21,-40,-20,-3,-127,-9,11,-54,22,-96,-79,-47,31,7,21,-25,-7,-14,19, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0083517413586378098, 0.0084882797673344612, 0.0036105646286159754, 0.005895757582038641, 0.011522212997078896, 0.011772987432777882, 0.010540924966335297, 0.0063427849672734737, 0.0092090386897325516, 0.006275795865803957, 0.0070344205014407635, 0.015431138686835766, 0.01150361355394125, 0.0056127705611288548, 0.0044862465001642704, 0.0066648907959461212, 0.0055949101224541664, 0.010284849442541599, 0.0052972403354942799, 0.0039093485102057457, 0.0075053921900689602, 0.014654823578894138, 0.0093016447499394417, 0.0088487220928072929, 0.04250437393784523, 0.0092326384037733078, 0.011162562295794487, 0.0074330219067633152, 0.0098784603178501129, 0.00383410369977355, 0.012729260139167309, 0.008289216086268425, 0.0051431744359433651, 0.0075453324243426323, 0.0094558848068118095, 0.012541461735963821, 0.0068776402622461319, 0.0111021613702178, 0.016215864568948746, 0.0041062398813664913, 0.0079579092562198639, 0.0069571747444570065, 0.0076152021065354347, 0.0061200321651995182, 0.0031312063802033663, 0.0038217518012970686, 0.0071677123196423054, 0.004979647696018219, 0.0066632525995373726, 0.0041655334644019604, 0.0064193778671324253, 0.0058777220547199249, 0.0050994213670492172, 0.0056259855628013611, 0.010762955993413925, 0.0076564056798815727, 0.0099544143304228783, 0.013850778341293335, 0.0038249434437602758, 0.0047563798725605011, 0.0061963093467056751, 0.0061034592799842358, 0.0078048794530332088, 0.0039057754911482334, 0.0078100091777741909, 0.010400021448731422, 0.018379177898168564, 0.0097305774688720703, 0.0095666022971272469, 0.010407842695713043, 0.012007160112261772, 0.0069773411378264427, 0.0035054315812885761, 0.010548208840191364, 0.0114430021494627, 0.0050002443604171276, 0.0053429198451340199, 0.0060110678896307945, 0.010497475042939186, 0.0049487543292343616, 0.013972233980894089, 0.0040436871349811554, 0.011355883441865444, 0.0087837092578411102, 0.0034037826117128134, 0.0067144501954317093, 0.0062071946449577808, 0.006711489986628294, 0.0092763472348451614, 0.0053540668450295925, 0.0035998355597257614, 0.012379822321236134, 0.0090960077941417694, 0.010724232532083988, 0.00328679452650249, 0.007542565930634737, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 7588, 2480, 2061, -889, 5159, 10571, 6947, 1313, -719, 9499, 651, -4136, 4110, 3576, -18, 129, 3328, 5955, 130, -740, 4592, 9666, 18384, -2526, -5807, -642, 11190, 257, 1806, 1501, 12235, -1704, 10364, 2155, 4685, -3521, 793, -3247, 642, 1792, 2295, 724, 2771, -616, 966, 2670, 4531, 4478, 4106, 2910, 6690, 2086, -4522, 3113, 1182, 2791, 2066, 2370, 9181, 1049, -785, 7935, 7628, 4747, 4475, 6058, -6910, 2644, 3059, -1416, 6711, 1295, 2676, 3917, 4362, 1523, -856, 1640, 5168, 5796, 2111, 2214, 7452, -100, 2799, 3897, 600, -1903, 15385, 50, 456, -967, 14541, 4904, -39, -199, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 9.8197466286364943e-05, 0.0001423854409949854, 0.0001309594081249088, 0.00018505027401261032, 0.00013483375369105488, 8.0874902778305113e-05, 0.00011819184146588668, 0.00017711830150801688, 0.00012557288573589176, 7.6186792284715921e-05, 0.00020630397193599492, 0.0001251382491318509, 0.00011941127013415098, 0.00013438987662084401, 0.00016101812070701271, 0.00020881780073978007, 0.00019134589820168912, 0.00012840259296353906, 0.00013084386591799557, 0.0001203121937578544, 0.00013695486995857209, 8.2502388977445662e-05, 5.5706350394757465e-05, 0.00011603358871070668, 0.00011371054279152304, 0.00014134935918264091, 6.9955698563717306e-05, 0.00014988472685217857, 0.0001544768747407943, 0.00014023747644387186, 7.7074313594494015e-05, 0.00012814805086236447, 8.5402833065018058e-05, 0.00019053737923968583, 0.00014152732910588384, 0.00013521526125259697, 0.00015497945423703641, 0.00017127815226558596, 0.00013997376663610339, 0.00017422559903934598, 0.00014513736823573709, 0.00024045782629400492, 0.00014887418365105987, 0.00021756107162218541, 0.00027653839788399637, 0.00017933774506673217, 0.00013038201723247766, 0.0001131380777223967, 0.00013150146696716547, 0.00015173981955740601, 0.00011761311907321215, 0.00016919885820243508, 0.00010874345753109083, 0.00015740586968604475, 0.00018729754083324224, 0.00015491567319259048, 0.00014347871183417737, 0.00014659851149190217, 7.8432203736156225e-05, 0.00021327716240193695, 0.00019293869263492525, 9.7417221695650369e-05, 9.0600100520532578e-05, 0.00014707342779729515, 0.00012636394239962101, 0.0001109474033000879, 0.00010395614663138986, 0.00016929199045989662, 0.00013108649000059813, 0.00016709862393327057, 0.00010957860649796203, 0.0001254054659511894, 0.00014472914335783571, 9.8462209280114621e-05, 0.00012758298544213176, 0.00012337659427430481, 0.00017608996131457388, 0.00016327293997164816, 9.2634923930745572e-05, 0.00010254331573378295, 0.00012200073979329318, 0.00017089178436435759, 9.7789110441226512e-05, 0.00013952575682196766, 0.00014955416554585099, 0.00014693678531330079, 0.00017045941785909235, 0.00018876513058785349, 5.5007425544317812e-05, 0.0002006414724746719, 0.00019326487381476909, 0.00023560119734611362, 6.5631109464447945e-05, 0.00010870397090911865, 0.00022312886721920222, 0.00016093975864350796, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -77,28,32,-52,-51,-114,-127,-31,71,-64,42,7,35,-123,70,-104, 
  /* [1][0][][] */ -127,39,-43,-61,-90,20,18,56,-34,42,67,-83,69,61,-16,79, 
  /* [2][0][][] */ -49,-11,-100,21,11,-16,49,-31,-59,107,90,22,46,48,-65,127, 
  /* [3][0][][] */ -75,-60,1,-61,-63,32,-17,-126,-23,24,44,-95,-78,-44,-127,-27, 
  /* [4][0][][] */ 48,35,-43,62,-63,12,-127,31,24,85,15,73,19,37,-40,-65, 
  /* [5][0][][] */ -103,-15,-91,-2,41,-17,-34,-29,109,-13,-20,-54,15,-58,-127,-122, 
  /* [6][0][][] */ 16,-55,-13,38,-61,61,50,-27,-12,-51,96,-39,-36,-13,-127,25, 
  /* [7][0][][] */ -49,44,111,-95,50,127,20,-53,108,10,-62,17,17,-24,-36,115, 
  /* [8][0][][] */ -36,-11,57,-24,36,40,88,127,-74,-2,-65,-60,16,69,-79,-54, 
  /* [9][0][][] */ 71,55,90,59,-71,-48,-110,-127,51,42,73,-26,-47,-89,79,-13, 
  /* [10][0][][] */ 32,-48,-50,-86,-127,63,0,-2,-36,-29,0,20,-34,5,-57,38, 
  /* [11][0][][] */ 81,-40,-10,94,-127,-9,51,-6,51,66,-2,38,-3,-57,-16,116, 
  /* [12][0][][] */ -59,-67,127,-48,90,-27,4,-8,76,9,72,59,-28,25,-76,-37, 
  /* [13][0][][] */ 11,-56,-19,43,-18,32,119,46,-92,-11,41,29,4,127,69,-54, 
  /* [14][0][][] */ 110,-80,127,9,68,53,87,8,78,61,68,111,92,-27,30,-93, 
  /* [15][0][][] */ 28,127,-1,-20,12,106,-48,60,-8,-36,-27,-20,-61,81,-35,-27, 
  /* [16][0][][] */ -35,56,111,-14,-9,90,-9,10,-26,-15,3,20,65,26,96,127, 
  /* [17][0][][] */ -15,101,25,-127,15,-5,4,-47,-13,84,-60,49,24,-15,83,-27, 
  /* [18][0][][] */ -105,16,-31,-91,127,45,-56,-48,51,77,101,104,-20,95,-35,-14, 
  /* [19][0][][] */ 4,104,125,58,74,-52,-23,-19,-25,118,55,127,98,105,-31,9, 
  /* [20][0][][] */ 67,-3,8,93,-127,32,44,43,-26,-105,-73,-55,77,-35,33,-12, 
  /* [21][0][][] */ -73,-67,-25,127,-60,-4,-113,48,-33,-19,31,35,-61,40,-11,-13, 
  /* [22][0][][] */ 35,-39,-72,-50,120,-1,-46,96,104,127,24,53,-14,27,-37,-29, 
  /* [23][0][][] */ -96,27,-30,29,-11,67,127,106,0,109,17,-28,-20,43,-86,-7, 
  /* [24][0][][] */ 41,-48,60,-2,127,3,86,-78,59,72,48,19,-75,86,35,-49, 
  /* [25][0][][] */ 127,-57,73,-5,34,-7,-43,109,63,-25,-63,-6,112,-88,93,45, 
  /* [26][0][][] */ 32,9,115,53,97,-41,-116,29,-1,82,24,127,16,-55,51,-92, 
  /* [27][0][][] */ -72,42,-31,-9,-32,84,-13,-99,34,-77,108,12,79,-33,127,82, 
  /* [28][0][][] */ -6,65,-87,-113,34,-66,-24,-91,-127,106,-59,5,-13,58,-4,82, 
  /* [29][0][][] */ 58,86,-45,88,37,106,-43,14,26,73,22,54,-127,33,-40,88, 
  /* [30][0][][] */ -6,75,-127,-81,75,-41,-15,-3,-86,31,-60,-9,9,73,16,116, 
  /* [31][0][][] */ 21,-100,124,54,52,-82,-80,59,-33,-27,48,-19,-102,92,-1,127, 
  /* [32][0][][] */ -40,65,19,34,-107,48,27,69,45,-127,-31,-120,42,0,20,43, 
  /* [33][0][][] */ -63,-35,60,85,-28,-4,-58,-18,-34,-22,42,-20,19,-30,37,127, 
  /* [34][0][][] */ 8,8,-79,-109,45,-53,-19,56,38,-9,2,0,-61,-34,-39,127, 
  /* [35][0][][] */ 98,-49,53,24,19,-10,-127,-6,-1,-109,-77,27,5,-50,38,-60, 
  /* [36][0][][] */ -10,47,-127,-13,67,84,-12,81,-16,46,32,0,-11,51,-56,31, 
  /* [37][0][][] */ 25,28,52,-43,20,-127,13,-17,-66,55,-63,-5,-6,17,49,47, 
  /* [38][0][][] */ -34,127,34,-55,26,22,74,-92,25,-11,-95,80,-39,-108,-92,7, 
  /* [39][0][][] */ 72,4,-65,-127,-15,-28,-6,-85,21,-18,-22,-15,31,-16,-102,-40, 
  /* [40][0][][] */ -43,63,-116,-123,-33,-23,-10,-127,19,9,-3,-27,56,102,67,54, 
  /* [41][0][][] */ -9,-72,-32,127,-12,4,-66,-12,-13,-44,87,-38,-60,5,9,33, 
  /* [42][0][][] */ -16,64,-30,-127,-11,23,43,-28,66,-5,-48,-8,85,-31,-21,50, 
  /* [43][0][][] */ 26,53,-2,38,127,36,32,71,-2,22,2,-55,-76,-9,-10,-26, 
  /* [44][0][][] */ 66,-3,39,50,-22,-19,-14,25,3,-51,15,-4,127,-18,-47,-28, 
  /* [45][0][][] */ 31,-120,-65,21,-66,-112,-23,55,11,-36,-8,-11,-101,127,80,-73, 
  /* [46][0][][] */ 7,-75,42,78,-27,9,-127,38,21,-56,49,-63,57,104,101,103, 
  /* [47][0][][] */ -61,-77,7,68,11,17,109,-9,3,-108,-127,-32,88,10,-95,9, 
  /* [48][0][][] */ -122,95,-31,-13,22,81,-17,-97,0,-3,59,-92,89,-127,-91,-11, 
  /* [49][0][][] */ -72,22,-7,-35,-1,37,104,127,-43,-29,4,-21,-37,31,-44,55, 
  /* [50][0][][] */ 55,33,-47,47,31,-127,-42,8,-85,68,-19,6,13,-34,-87,-46, 
  /* [51][0][][] */ -13,38,-40,95,-73,22,-28,-65,-29,-65,18,-16,-18,8,-5,127, 
  /* [52][0][][] */ -104,5,-1,-17,14,45,76,-4,18,-75,-28,-39,-79,-53,-127,13, 
  /* [53][0][][] */ -50,-62,-24,-127,-37,-8,12,37,19,-77,-33,4,-43,3,41,88, 
  /* [54][0][][] */ 30,-59,-9,5,-37,64,46,-12,-23,-107,44,28,3,10,-127,19, 
  /* [55][0][][] */ -29,-8,-28,11,39,-41,79,77,-73,-46,-127,-52,50,-62,-49,73, 
  /* [56][0][][] */ 53,-44,-17,-20,-127,-1,-104,-1,-13,-22,-41,9,58,-27,53,57, 
  /* [57][0][][] */ -19,-20,3,-17,127,34,56,0,-3,38,-14,-15,-46,41,-103,-36, 
  /* [58][0][][] */ 8,12,0,-57,83,-30,-91,-101,87,-127,-123,5,-47,-66,-22,45, 
  /* [59][0][][] */ -55,-44,-4,-1,3,35,-74,-57,103,127,-41,21,-9,-26,-36,29, 
  /* [60][0][][] */ 14,-58,14,46,-127,-23,18,35,-24,23,5,69,-13,-13,36,30, 
  /* [61][0][][] */ -20,24,-38,16,-19,-26,-127,-65,-44,3,11,102,62,-28,125,52, 
  /* [62][0][][] */ 29,-16,10,8,-50,72,2,99,-82,70,39,74,23,70,125,127, 
  /* [63][0][][] */ 41,-127,-32,-24,-105,27,58,-7,5,-36,19,9,-47,100,84,54, 
  /* [64][0][][] */ -1,19,-127,-62,11,67,72,-46,56,-91,30,17,81,-46,-74,104, 
  /* [65][0][][] */ -13,17,56,13,72,-59,101,43,-57,-8,-127,-77,35,99,-53,-8, 
  /* [66][0][][] */ -30,-127,12,-60,-75,-105,23,-10,-8,-37,36,101,-42,-36,-79,82, 
  /* [67][0][][] */ -49,-64,-97,-45,-32,124,-37,-127,-72,-2,-20,-88,61,-22,-37,10, 
  /* [68][0][][] */ 72,41,45,9,-101,80,-104,-22,-87,-127,23,-11,3,-59,46,-90, 
  /* [69][0][][] */ 28,11,37,4,-23,-55,-61,31,-21,127,-9,19,27,58,65,15, 
  /* [70][0][][] */ 28,-35,9,96,-127,21,29,-86,60,60,18,36,34,-96,-9,43, 
  /* [71][0][][] */ 112,-50,13,37,-99,-34,8,-127,120,6,-27,54,86,-51,83,-35, 
  /* [72][0][][] */ -44,-73,35,62,87,4,-127,72,72,7,62,41,-3,-70,-65,107, 
  /* [73][0][][] */ 107,11,76,-122,10,-127,-66,43,-66,75,-12,11,-21,-122,67,3, 
  /* [74][0][][] */ 81,-22,92,59,-127,-20,80,1,-92,-59,-13,-72,8,-72,-34,40, 
  /* [75][0][][] */ 76,103,-127,-15,34,42,-15,-69,-12,-10,39,59,-56,51,82,60, 
  /* [76][0][][] */ -74,-61,7,-51,-46,-21,77,-15,-53,47,91,26,-55,-127,-31,97, 
  /* [77][0][][] */ -50,127,3,-43,-40,-102,91,42,59,-79,-27,62,-57,28,-38,101, 
  /* [78][0][][] */ 58,14,-67,-6,-109,2,-127,-55,21,-2,-105,12,85,-117,18,24, 
  /* [79][0][][] */ -65,-66,111,43,-66,-126,-40,-103,-101,-28,72,6,-52,127,-14,96, 
  /* [80][0][][] */ 86,73,66,-122,-12,42,65,-47,75,51,-85,-13,86,-127,-10,-1, 
  /* [81][0][][] */ 23,-5,21,-123,71,10,8,57,127,35,10,-46,-17,37,-55,-50, 
  /* [82][0][][] */ 97,50,73,-5,127,-71,30,15,26,105,-56,-23,-10,-78,42,-108, 
  /* [83][0][][] */ 25,66,-25,42,57,93,106,127,62,15,-34,-96,-103,73,-90,-65, 
  /* [84][0][][] */ -15,-92,39,75,6,-74,-70,35,-54,43,-48,-2,-127,26,-20,-22, 
  /* [85][0][][] */ -81,92,-51,46,-32,3,-78,-32,-33,27,25,-124,-127,-25,-49,75, 
  /* [86][0][][] */ -10,47,109,90,23,-58,43,22,21,-3,-44,-71,25,41,-127,-33, 
  /* [87][0][][] */ -7,36,127,-30,-72,-44,5,27,16,-18,18,47,-69,14,-25,7, 
  /* [88][0][][] */ -113,-83,-102,62,93,71,-23,77,1,-68,-127,-83,85,-6,-33,-14, 
  /* [89][0][][] */ 11,18,0,-93,23,-28,-53,36,127,-5,22,-61,21,-22,40,-74, 
  /* [90][0][][] */ 17,82,12,21,-33,34,18,127,-26,-36,-2,122,47,34,2,37, 
  /* [91][0][][] */ -27,27,-15,66,50,33,-62,-79,-66,11,29,44,-127,-81,-35,-38, 
  /* [92][0][][] */ -7,31,18,-32,-127,-27,-55,36,-49,9,52,90,-40,-4,67,-22, 
  /* [93][0][][] */ 127,28,95,87,-80,-94,-15,25,-45,-23,-72,-106,54,-67,-13,-2, 
  /* [94][0][][] */ -25,-127,16,-104,9,54,0,19,63,-20,-18,36,-7,38,-77,65, 
  /* [95][0][][] */ -8,4,-59,-67,84,127,-51,8,104,74,-46,63,-26,104,-79,33, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0013835077406838536, 0.0020060737151652575, 0.00184509193059057, 0.0026071800384670496, 0.0018996776780113578, 0.0011394494213163853, 0.001665209187194705, 0.0024954262189567089, 0.0017692010151222348, 0.0010733985109254718, 0.0029066242277622223, 0.0017630773363634944, 0.001682389760389924, 0.0018934239633381367, 0.0022685902658849955, 0.002942041726782918, 0.0026958794333040714, 0.0018090688390657306, 0.0018434639787301421, 0.0016950828721746802, 0.0019295621896162629, 0.0011623791651800275, 0.00078484881669282913, 0.0016348015051335096, 0.0016020720358937979, 0.0019914763979613781, 0.00098560843616724014, 0.0021117313299328089, 0.0021764303091913462, 0.0019758108537644148, 0.0010859027970582247, 0.00180548254866153, 0.0012032436206936836, 0.0026844881940633059, 0.0019939837511628866, 0.0019050526898354292, 0.0021835111547261477, 0.002413144102320075, 0.00197209557518363, 0.0024546708445996046, 0.0020448456052690744, 0.0033878190442919731, 0.0020974937360733747, 0.0030652259010821581, 0.0038961598183959723, 0.0025266960728913546, 0.0018369569443166256, 0.0015940065495669842, 0.0018527288921177387, 0.0021378679666668177, 0.0016570555744692683, 0.0023838488850742579, 0.0015320905949920416, 0.0022176969796419144, 0.0026388419792056084, 0.0021826126612722874, 0.0020214768592268229, 0.0020654317922890186, 0.0011050341418012977, 0.0030048696789890528, 0.0027183203492313623, 0.001372514758259058, 0.0012764681596308947, 0.0020721228793263435, 0.0017803461523726583, 0.0015631420537829399, 0.0014646420022472739, 0.0023851611185818911, 0.0018468823982402682, 0.0023542586714029312, 0.0015438570408150554, 0.0017668422078713775, 0.0020390942227095366, 0.0013872376875951886, 0.0017975212540477514, 0.0017382573569193482, 0.0024809378664940596, 0.0023003583773970604, 0.0013051368296146393, 0.0014447364956140518, 0.0017188729252666235, 0.0024077005218714476, 0.0013777543790638447, 0.0019657835364341736, 0.0021070740185678005, 0.0020701978355646133, 0.0024016089737415314, 0.0026595187373459339, 0.00077500165207311511, 0.0028268450405448675, 0.0027229159604758024, 0.0033193938434123993, 0.00092467910144478083, 0.0015315342461690307, 0.0031436707358807325, 0.0022674861829727888, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -28956, -13898, 5715, -16042, 10885, -15080, 24579, -11934, 13013, -15967, 9532, 15425, -4250, -29566, 236, 8852, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.5039734181482345e-05, 4.4286753109190613e-05, 6.9029527367092669e-05, 6.6333268478047103e-05, 6.6711574618238956e-05, 0.00011406054545659572, 6.3307772506959736e-05, 6.17658079136163e-05, 9.5517112640663981e-05, 0.00011148370685987175, 7.897640170995146e-05, 5.7367007684661075e-05, 6.6417218476999551e-05, 8.9690278400667012e-05, 7.4389878136571497e-05, 7.8026641858741641e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 0,34,16,16,-13,-79,-7,4,-17,-57,13,0,46,-60,49,27,-71,-16,44,14,62,26,-55,6,0,62,123,52,20,80,70,-32,-3,3,37,-23,29,14,-16,9,127,7,2,-12,-1,-20,22,-33,17,-34,105,-7,-84,16,57,29,-7,-26,10,3,-8,67,-45,-33,28,19,71,17,-15,2,40,24,24,52,0,27,71,-45,35,51,-18,34,9,33,-55,3,-4,46,-4,6,-103,-12,27,35,92,77, 
  /* [1][0][][] */ 1,37,-52,-31,-47,-66,127,-73,-35,-14,-81,-36,17,-41,-24,-60,-29,-19,-22,21,-3,-73,121,-22,1,15,-32,61,-32,24,11,28,-35,47,36,38,-40,53,-70,73,58,34,-22,-33,77,-51,23,62,-76,-3,35,-77,-22,71,90,49,14,22,-54,15,-36,37,4,-47,62,66,95,-5,1,-93,31,34,21,70,-26,30,-46,-36,95,-9,42,-25,14,-33,-17,-75,-12,16,-42,-36,18,14,70,-67,-39,61, 
  /* [2][0][][] */ 17,-22,4,-11,78,66,-81,36,-63,28,17,0,6,-23,44,17,48,-31,-127,-17,-20,-46,-18,14,-9,-6,-18,18,-31,-19,-39,81,-14,-49,1,4,-37,22,-12,-18,47,-6,26,23,-10,33,-19,-20,-56,-9,-15,-2,-12,36,-8,-54,55,3,41,-6,1,-43,-20,59,21,-28,-4,2,-27,-5,-24,-28,0,40,40,59,-62,-42,-17,-52,34,20,62,-38,0,-49,-33,-52,4,-23,6,45,5,-5,92,-42, 
  /* [3][0][][] */ 26,-26,-28,-58,9,-23,97,-14,20,106,-50,13,-2,-12,19,43,64,54,-5,35,-45,13,9,0,-25,64,30,-13,-31,-4,-48,55,-5,-9,35,-22,13,-49,-18,48,13,-7,-19,30,54,-26,4,1,25,-25,32,-54,58,38,39,-17,-13,-10,-9,-40,-31,25,54,-24,-22,-13,127,-45,-63,-4,-38,22,42,-38,12,-44,33,-48,109,13,11,-50,-28,-33,-22,-31,43,52,-62,25,-61,-4,22,-30,-19,42, 
  /* [4][0][][] */ -32,88,36,34,-27,-2,-4,-44,32,-21,-5,-1,46,38,-46,26,-9,-71,5,-72,34,-25,-52,42,-44,-37,-58,13,-47,127,-28,-50,-1,-31,-24,-28,77,43,-56,5,30,40,11,-55,-33,-10,79,-7,41,-14,-80,8,-46,72,53,28,-18,83,-33,27,-21,-35,-20,-15,74,45,-66,-1,49,-20,18,-56,3,44,59,59,-38,25,-55,58,6,54,5,-29,55,-81,-18,-55,-37,-40,-33,-5,-2,-21,25,-55, 
  /* [5][0][][] */ 7,-42,46,-38,-33,-22,-4,-1,35,22,-34,-15,-5,-27,4,-19,-23,7,-55,-33,-22,21,-8,23,16,-34,46,-6,3,42,13,77,-10,-61,22,26,-58,-31,-39,-8,-33,15,-31,11,17,14,-55,32,-14,20,39,11,36,-66,-19,25,-42,-67,5,-20,41,26,29,42,-33,0,85,-15,10,-10,11,23,-4,28,37,-5,-10,-3,127,35,-32,-5,-49,18,43,50,9,101,21,-21,5,27,0,-20,-30,-1, 
  /* [6][0][][] */ 36,-76,69,40,-5,127,-76,-122,-8,-87,-66,29,-5,-11,-34,65,14,6,-6,-62,-91,-9,-83,-48,-5,-56,20,71,-110,42,0,-26,56,63,-29,-26,-21,-7,34,-27,-31,52,55,-39,6,23,-110,-30,68,13,-54,-106,75,-26,-65,-12,30,4,8,-27,-34,-81,13,30,35,-88,-67,-34,-81,-30,-36,-79,-33,-79,36,-108,49,-13,-65,7,-27,76,51,-79,66,-24,-21,9,-33,79,-53,82,29,-46,76,-97, 
  /* [7][0][][] */ -16,4,-68,82,5,7,22,-9,-109,-9,89,50,-18,-54,15,-43,9,-16,10,12,-51,-18,-48,-25,74,21,27,45,-10,9,23,17,-42,-123,32,71,-9,11,-36,19,-14,-27,8,-40,13,41,38,37,-18,69,-26,-24,11,-54,54,-51,-18,48,-68,-34,48,-5,-15,-17,57,-45,127,-30,-76,-63,68,-4,-2,-28,-71,1,31,-49,117,-37,9,0,-29,-32,27,39,-68,27,-25,8,-10,15,67,20,58,3, 
  /* [8][0][][] */ 6,-67,33,4,-13,-4,16,12,-20,-16,26,57,19,29,-39,19,67,-3,9,6,-31,-84,-28,-15,-42,-32,45,-5,-24,64,4,-48,-1,1,0,12,-44,-14,38,-21,-8,66,37,-38,0,-24,19,-30,27,-13,63,6,-2,24,-57,-14,-21,100,-51,-4,4,-65,-61,2,-79,-50,-2,22,20,-6,32,-53,-48,-127,39,-117,0,13,-48,19,-26,-25,22,52,45,-84,-33,54,-19,77,38,-37,-55,-3,4,-60, 
  /* [9][0][][] */ -31,-21,-17,19,-19,2,31,36,-19,6,39,46,-16,52,31,-40,-19,37,-5,-22,8,41,0,19,-9,24,-5,16,34,6,50,8,-24,4,19,79,-19,-8,14,-7,10,-16,-5,7,20,44,22,63,-45,10,0,43,127,33,13,11,8,-16,36,15,-20,21,87,-7,28,39,54,-9,57,14,-7,16,31,-112,-24,-100,-23,-7,27,10,-3,18,-23,-22,47,-1,-49,-6,-26,100,14,44,55,18,-10,30, 
  /* [10][0][][] */ 27,51,-11,27,16,21,-31,-25,57,6,-18,22,0,18,21,-62,-31,4,34,-3,27,0,-30,-40,27,-29,-60,32,-28,55,-15,14,24,8,-20,-7,36,15,7,-6,36,-28,62,-44,-21,-4,3,4,5,-2,10,-46,-35,-41,6,46,-20,30,-7,-17,-12,-48,-15,25,-6,-15,-62,-37,-64,-26,42,-21,-13,43,41,27,53,-30,-66,-1,-7,46,32,-20,3,19,-87,-127,-41,20,2,22,64,-6,17,33, 
  /* [11][0][][] */ 16,1,-20,7,-36,40,-15,47,65,-12,6,-25,-6,17,34,-6,-18,67,36,-50,15,20,-5,-36,58,13,71,-10,34,-60,-49,15,10,86,-102,-13,52,-16,66,17,-75,31,-4,0,-56,-5,-31,-10,39,-9,-22,-42,-17,-4,-65,93,2,-5,14,-44,19,-21,-26,-50,-16,-41,-127,-97,-5,-18,-93,13,41,26,11,14,44,48,-107,-50,0,6,16,-24,-18,-3,49,73,6,-66,-2,-12,-11,43,79,50, 
  /* [12][0][][] */ 1,47,-19,-54,0,-36,22,31,49,-18,23,-7,-2,-6,-15,33,11,-31,-18,-5,17,24,3,32,-27,-46,-127,-23,71,-4,26,4,0,-76,78,0,34,-36,-24,26,5,-53,-1,40,54,-8,32,4,-80,-1,-62,96,69,3,60,-82,20,9,-42,-58,3,68,88,-13,-4,3,35,18,96,30,24,23,5,-22,-27,-24,-22,-46,28,-48,18,-45,3,-12,0,2,19,-107,-37,47,-45,20,29,58,3,51, 
  /* [13][0][][] */ -9,-1,-57,32,16,26,-7,-18,20,49,-11,43,-53,-30,65,-30,28,31,56,23,-32,-48,-23,1,19,39,-24,6,5,35,71,-8,-15,36,-3,38,2,-23,-31,-32,19,-11,26,0,49,32,-30,19,-22,26,9,-1,-23,-30,65,42,-15,-21,-17,-9,6,12,-7,-26,8,72,127,44,10,-15,-52,-4,59,44,-41,52,10,-62,106,-35,5,-40,20,18,43,35,-34,-6,-18,-26,11,31,41,22,64,39, 
  /* [14][0][][] */ -27,63,22,19,-85,-63,21,48,-66,-6,76,12,-82,7,84,-13,-15,37,-38,42,-27,9,-85,6,-40,4,-68,-120,17,4,26,82,-68,23,31,3,-20,-87,-22,-23,45,-38,21,-13,-11,44,-52,19,-10,-46,88,33,-27,46,5,12,-54,29,0,28,27,99,-2,28,29,-15,-17,-76,21,80,91,32,-38,36,-5,28,46,-3,6,46,-49,93,-37,-82,79,-10,8,-7,-127,-28,-38,-13,-4,22,32,45, 
  /* [15][0][][] */ 53,-32,2,27,73,19,-47,-27,15,18,-33,-7,33,39,5,-14,-10,0,-82,37,30,-30,11,4,80,-46,100,24,37,-46,-68,38,81,35,2,-109,57,75,63,51,69,17,0,5,-52,-127,-1,-38,-22,-7,-6,-19,0,-92,-48,52,14,15,-14,4,0,-75,-47,59,22,35,-76,40,-1,-49,-4,-9,-23,-120,-34,-103,-14,3,-100,14,82,-30,82,12,-55,17,-5,-9,59,85,14,-72,-26,-33,22,-30, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0027641886845231056, 0.0018821869743987918, 0.0029337548185139894, 0.0028191637247800827, 0.0028352418448776007, 0.0048475731164216995, 0.0026905802078545094, 0.0026250467635691166, 0.0040594772435724735, 0.0047380574978888035, 0.003356497036293149, 0.0024380977265536785, 0.0028227316215634346, 0.0038118367083370686, 0.0031615698244422674, 0.0033161323517560959, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 11800, 202, -18581, 7208, -3181, -6526, 249, 1205, -727, -8520, 2140, -2305, 8756, -2242, -2780, -6696, -2174, -1567, -4525, -711, 1603, 7567, -5087, 165, 370, 7869, -17857, -10946, -1209, -3014, 712, 524, 16417, -1055, -3045, 798, 321, 14888, -1166, 6519, 279, 8485, 2692, 4444, 1449, -2789, 5985, -3290, -4972, -460, -2480, -3134, -1979, -3664, 921, 1147, -4223, 1917, 1989, 1139, 717, -1157, -396, 8604, 15187, 1271, 15178, 8831, 2780, 937, 13687, -2, 24, 1244, -5448, -125, 13200, 4765, 12327, 15882, 8528, -797, 7916, 10466, -610, -4877, 16262, -6758, 10663, 1784, -9967, -1489, 248, 4176, 13350, -488, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 8.6294901848305017e-05, 0.0003779627732001245, 6.3859210058581084e-05, 0.00018109727534465492, 0.00016477408644277602, 0.00029471507878042758, 9.0479064965620637e-05, 0.0002138782583642751, 0.00028656900394707918, 0.00012752052862197161, 0.00023429187422152609, 0.00018071639351546764, 8.6856678535696119e-05, 0.0001827538653742522, 0.00024485657922923565, 0.000184987424290739, 0.0001937172346515581, 0.00024924412718974054, 0.00020419037900865078, 0.00030006820452399552, 0.00024023145670071244, 0.00015663314843550324, 0.00013104575918987393, 0.00024013739312067628, 0.0015198509208858013, 0.00013618166849482805, 0.00013631857291329652, 8.0061705375555903e-05, 0.00027716218028217554, 0.00015551950491499156, 0.00016223874990828335, 0.00033549009822309017, 8.9649736764840782e-05, 0.00033681702916510403, 0.00011516072117956355, 0.00019229801546316594, 0.00033820379758253694, 9.5593772130087018e-05, 0.00026053719921037555, 0.00013607087021227926, 0.00043309220927767456, 0.00012479507131502032, 0.00017846845730673522, 0.00014838502102065831, 0.00018071147496812046, 0.00025117912446148694, 0.00013383204350247979, 0.00029700653976760805, 0.00011730198457371444, 0.0003825478779617697, 0.00033213655115105212, 0.00023239207803271711, 0.00017338755424134433, 0.00029213304514996707, 0.00028580313664861023, 0.00025155948242172599, 0.0001429067924618721, 0.00038379812031053007, 0.00032142316922545433, 0.00024142891925293952, 0.00023214044631458819, 0.00027174068964086473, 0.00016475385928060859, 0.0001082445596694015, 0.00019423199410084635, 0.00043297462980262935, 0.00012888741912320256, 0.00014827214181423187, 0.00023597739345859736, 0.0003370103077031672, 0.00010044468945125118, 0.00023355467419605702, 0.00034786100150085986, 0.00016246901941485703, 0.00013115011097397655, 0.0001896985195344314, 8.5710045823361725e-05, 0.00019785147742368281, 0.00011477142834337428, 0.00012188016989966854, 0.00011974210065091029, 0.00027268665144219995, 0.00015701698430348188, 0.00019046945089939982, 0.00011993308726232499, 0.00019217006047256291, 9.4731927674729377e-05, 0.00021030171774327755, 0.00012947314826305956, 0.00022084717056713998, 9.7657517471816391e-05, 0.00018191683921031654, 0.00035358432796783745, 0.00012799579417333007, 0.00011709234968293458, 0.00032915570773184299, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,-16,86,-48,127,12,37,-40,8,43,-21,-12,-5,-14,-7,-9,-2,11,-49,-25,-37,17,22,21,-13,22,31,45,20,-9,12,-7,-9,8,25,-25,-10,-127,-15,-10,3,-9,13,-17,-49,41,-64,6,-84,21,-6,56,-44,21,61,-20,43,-12,2,-15,0,-31,-22,3,-33,-58,-61,-56,-44,27,-90,-4,92,-1,2,-27,-61,26,127,-11,-18,-8,-127,-12,-18,14,31,3,-36,-43,20,-37,19,11,52,-8, 10,50,106,-118,-32,12,127,-49,9,68,-43,-5,-32,13,-87,16,2,86,68,-47,0,127,125,127,17,18,87,118,127,97,127,-30,-111,-16,-74,-32,1,-90,127,-14,-23,-127,-30,-41,80,-26,29,34,24,14,16,127,-73,54,-72,3,-64,-12,-9,14,-12,-127,-127,-78,-86,-21,-26,-92,-29,20,-127,117,-127,-4,-9,-45,-127,-45,12,-108,-63,7,5,-65,127,127,-92,34,-93,2,-21,-35,11,101,24,-63, -15,-2,75,-15,86,31,74,-34,-7,66,-17,3,17,-10,-6,-1,6,0,-86,-46,-55,-18,85,7,-21,19,27,36,8,16,32,2,24,8,15,88,-2,-40,3,11,-10,-15,-1,-15,-47,-31,-1,-19,17,6,-14,44,31,9,9,2,99,-24,1,-42,-6,-16,-61,17,-69,-38,112,-10,-23,21,-73,2,79,7,9,21,-96,70,-30,-70,18,-7,-118,-4,25,14,-43,4,-127,-43,27,59,22,-7,41,-1, 
  /* [0][1][][] */ -123,-12,127,-44,49,127,-41,-40,3,-10,-32,1,-127,11,37,87,6,35,61,37,4,-41,73,-30,12,41,107,20,-21,-13,-14,-17,-41,-6,97,-16,-7,-50,-43,-127,-22,-61,65,-35,-86,127,-127,-54,62,73,20,-39,-91,76,61,-21,31,-26,22,21,2,-11,88,-75,-43,16,-24,-43,-30,-33,-111,2,116,127,20,-73,-44,-64,-50,-52,-118,-18,9,-63,9,22,-110,44,-36,127,92,-86,127,-10,1,-12, 17,127,91,122,-118,-123,125,-68,127,127,-82,-71,-110,127,-20,82,127,-127,127,127,127,-118,48,-97,-127,-127,127,127,-94,127,-22,127,-59,127,124,-115,127,115,21,47,127,-19,-127,-98,127,-13,116,127,127,-127,127,-99,82,127,-127,127,-117,127,-127,127,-127,121,88,-127,127,127,-27,127,-85,-127,64,-127,-23,116,127,79,7,-127,89,-127,22,127,106,127,51,57,-127,127,-79,36,-44,-37,-98,-38,-68,-11, -127,-40,104,16,14,96,-54,-30,-27,-41,-4,127,-87,1,18,127,-8,43,4,1,-24,-57,-13,-31,8,6,75,33,-4,-20,32,-7,-34,-23,122,127,5,-73,-31,-79,-46,-47,11,-47,-83,-68,-109,-73,106,72,-7,-25,127,35,94,-32,127,-20,29,-51,1,-36,-73,60,-86,5,-51,-50,-32,4,-122,-11,102,-106,26,127,-38,-7,-37,-33,-127,-26,-25,-89,-14,40,-127,45,-42,-89,127,127,-45,-36,-61,-14, 
  /* [0][2][][] */ -17,-42,68,-33,37,25,-8,16,1,-20,27,-14,14,-7,14,-69,10,-15,-84,6,-37,-40,-2,-32,-18,-46,36,23,-19,-26,-40,-1,-33,3,-30,-49,-18,-115,-10,-34,-31,-54,7,21,33,20,-52,1,-90,11,-34,-1,-18,-24,26,-4,49,-18,1,2,-28,53,13,-82,-17,-16,127,-1,10,5,13,-9,-32,-6,13,-18,38,60,-39,-8,-20,12,-62,-28,-10,-4,37,-12,45,-5,50,-20,-34,-26,-32,-4, -59,-42,123,-127,-18,12,97,127,-42,38,127,-33,-95,5,127,23,-3,-15,34,-50,-56,-74,127,43,-4,-55,39,44,0,-1,-98,-45,-127,-30,-127,-13,-91,-118,37,-2,-19,-123,-49,127,19,-2,-9,16,44,-8,-17,21,58,51,-67,-27,-8,-37,31,-27,121,34,98,-68,-99,-32,-37,-50,127,19,-7,15,10,-29,27,-14,55,-67,9,18,-18,-11,-96,-92,32,-123,-40,24,-86,-10,50,-5,-5,-127,-127,127, -59,-11,57,3,31,26,-26,19,-9,10,14,42,69,-21,13,15,-6,26,-51,-29,-45,-43,-3,-25,-30,-28,-8,29,-3,-22,-39,-8,-66,8,-16,-22,-19,-80,-16,-16,-37,3,-18,4,21,7,-40,21,-65,-12,-18,8,7,-10,14,4,80,-15,5,-22,-15,56,22,44,-35,-10,-31,29,23,-2,-30,-12,-17,-41,21,3,10,61,82,-30,-56,-22,-53,-42,15,26,-14,1,17,-15,50,27,1,-37,-66,-15, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0038686261978000402, 0.01694418303668499, 0.0028628273867070675, 0.0081186443567276001, 0.0073868711479008198, 0.013212164863944054, 0.0040562031790614128, 0.009588225744664669, 0.012846973724663258, 0.0057167829945683479, 0.010503374040126801, 0.0081015694886445999, 0.0038938105572015047, 0.0081929098814725876, 0.010976992547512054, 0.0082930410280823708, 0.0086844014003872871, 0.011173687875270844, 0.0091539155691862106, 0.013452147133648396, 0.010769647546112537, 0.0070219105109572411, 0.0058748200535774231, 0.010765430517494678, 0.068135365843772888, 0.0061050648801028728, 0.0061112018302083015, 0.0035891900770366192, 0.012425263412296772, 0.0069719855673611164, 0.0072732116095721722, 0.015040120109915733, 0.0040190243162214756, 0.015099607408046722, 0.0051626893691718578, 0.0086207771673798561, 0.015161776915192604, 0.0042854971252381802, 0.011679959483444691, 0.0061000972054898739, 0.019415652379393578, 0.0055945999920368195, 0.0080007938668131828, 0.0066521447151899338, 0.008101348765194416, 0.011260434053838253, 0.0059997299686074257, 0.01331489160656929, 0.0052586826495826244, 0.017149735242128372, 0.014889780431985855, 0.01041820552200079, 0.0077730156481266022, 0.013096410781145096, 0.012812639586627483, 0.011277486570179462, 0.0064065540209412575, 0.017205784097313881, 0.014409496448934078, 0.010823329910635948, 0.010406925342977047, 0.012182216159999371, 0.0073859645053744316, 0.0048526357859373093, 0.0087074777111411095, 0.019410381093621254, 0.0057780612260103226, 0.0066470843739807606, 0.010578936897218227, 0.01510827150195837, 0.0045029651373624802, 0.010470325127243996, 0.015594711527228355, 0.0072835343889892101, 0.0058794980868697166, 0.0085042407736182213, 0.0038424069061875343, 0.0088697401806712151, 0.0051452373154461384, 0.0054639242589473724, 0.0053680739365518093, 0.012224623933434486, 0.0070391180925071239, 0.0085388021543622017, 0.0053766360506415367, 0.0086150411516427994, 0.0042468602769076824, 0.0094278883188962936, 0.0058043194003403187, 0.0099006444215774536, 0.0043780156411230564, 0.0081553859636187553, 0.01585129089653492, 0.0057380893267691135, 0.0052492846734821796, 0.014756147749722004, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 831, 10989, 865, 1749, 2620, 18007, -332, 1539, 8269, -468, 9438, 2996, 1420, 630, 6503, 592, 3021, 3716, -797, 14675, 1449, 10631, -1319, 1930, -7010, 1608, 2854, 3085, 4427, 1066, 4006, 2543, 1743, 7463, 3203, 3958, 3638, 2885, 4684, 2780, 21555, 1048, 3122, 1189, 3724, 9562, 8124, 8912, 2026, -1230, 2445, 8070, 2838, -3034, 15505, 263, 748, 6423, 1123, 1789, 4267, 10558, 3622, 275, 32878, 18680, 2497, 2787, 5418, 3664, 2175, 1445, -2812, 4795, 1577, 2680, 931, 9405, 3762, 7662, 1474, 203, 4287, 8779, -538, 7002, 6926, 2044, -1337, 2697, 1479, 8159, 4380, 1904, 3657, 3649, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00021112358081154525, 7.8153294452931732e-05, 0.00025195933994837105, 0.00024658115580677986, 0.00019614108896348625, 5.2006518671987578e-05, 0.00024080238654278219, 0.00017496153304819018, 9.6360272436868399e-05, 0.00018316818750463426, 9.5114221039693803e-05, 0.00015259126666933298, 0.00019948756380472332, 0.00037908443482592702, 0.0001088051067199558, 0.00012565286306198686, 0.00016949621203821152, 0.00015301784151233733, 0.00017260121239814907, 5.6992055760929361e-05, 0.00021147234656382352, 8.0003148468676955e-05, 0.00019012484699487686, 0.00013603176921606064, 0.00010092451702803373, 0.00012516682909335941, 0.00016207275621127337, 0.00016091193538159132, 0.00017034370102919638, 0.00023406595573760569, 0.00015676695329602808, 0.00018110946984961629, 0.0002342454536119476, 0.00011501133849378675, 0.00015636083844583482, 0.00013041603961028159, 0.00016567164857406169, 0.00018134861602447927, 0.00010540446237428114, 0.00015391907072626054, 4.4550139136845246e-05, 0.00017822090012487024, 0.00014293621643446386, 0.00013404671335592866, 0.00013589869195129722, 9.0508081484586e-05, 8.9757944806478918e-05, 9.1797781351488084e-05, 0.00019403686746954918, 0.00026240383158437908, 0.00018890391220338643, 0.0001011272324831225, 0.00016783853061497211, 0.00014791944704484195, 6.0468180890893564e-05, 0.00024552733520977199, 0.0002732662542257458, 0.00012589400284923613, 0.00017761773779056966, 0.00017758227477315813, 0.00012214166054036468, 7.8628967457916588e-05, 0.0001888946135295555, 0.00020624427997972816, 3.3055363019229844e-05, 5.3556050261249766e-05, 0.00019360578153282404, 0.00021889458002988249, 0.00014519278192892671, 0.00015145512588787824, 0.00020533017232082784, 0.00013920657511334866, 0.00021030826610513031, 0.00013953991583548486, 0.00021796887449454516, 0.00023978855460882187, 0.00015554699348285794, 9.1708025138359517e-05, 0.00015411774802487344, 9.9793200206477195e-05, 0.00022336178517434746, 0.00025548064149916172, 0.00015940376033540815, 9.8127726232632995e-05, 0.00017267948715016246, 0.00011356361937941983, 0.00010745942563517019, 0.0002257400774396956, 0.00016072693688329309, 0.00022106966935098171, 0.00015711036394350231, 0.00010071516589960083, 0.00013456460146699101, 0.00019702437566593289, 0.00014341392670758069, 0.00014596704568248242, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 81,23,18,45,-127,-46,76,15,87,119,-34,35,37,-6,48,44, 
  /* [1][0][][] */ -66,-21,-67,21,108,127,37,32,-58,-12,-16,0,-25,51,-82,-14, 
  /* [2][0][][] */ -47,62,63,2,57,95,-1,42,20,-6,34,-39,28,-127,-20,23, 
  /* [3][0][][] */ 127,-24,22,-21,2,23,-19,-6,52,44,-69,-11,-28,41,-2,29, 
  /* [4][0][][] */ -127,-58,0,68,-120,22,-88,-18,18,28,2,-41,-72,24,-31,118, 
  /* [5][0][][] */ -105,-19,20,26,127,36,30,30,-49,8,-37,30,-55,39,-83,-11, 
  /* [6][0][][] */ -127,26,-27,32,-3,-97,98,5,22,-29,-50,59,12,16,-31,7, 
  /* [7][0][][] */ -22,57,60,-127,46,82,101,-30,60,14,-10,63,70,30,-60,-44, 
  /* [8][0][][] */ 2,5,-64,107,-45,42,-63,-65,32,13,119,79,127,106,-70,11, 
  /* [9][0][][] */ -55,-127,-81,59,-75,-36,-10,109,39,10,48,67,-121,-10,-20,-2, 
  /* [10][0][][] */ 1,-2,-71,27,-127,55,35,-69,-14,-21,18,-25,-6,90,-26,57, 
  /* [11][0][][] */ -52,-72,-22,19,36,47,-13,-11,-16,73,28,-74,42,127,-118,66, 
  /* [12][0][][] */ -53,-62,-70,78,-61,-127,6,46,91,74,-35,123,24,-8,-11,-15, 
  /* [13][0][][] */ -76,-30,-17,-14,-22,10,18,3,-20,127,-19,-32,15,20,13,-12, 
  /* [14][0][][] */ -124,-35,-16,-25,35,71,-43,-112,48,-24,23,-15,60,-20,-127,-115, 
  /* [15][0][][] */ -6,-107,97,-109,-70,-16,7,70,-4,-41,-123,-39,127,-98,-20,-82, 
  /* [16][0][][] */ 2,4,5,-68,26,47,-14,-49,61,-127,52,-34,-42,18,-101,-84, 
  /* [17][0][][] */ -7,-30,52,-20,-4,-33,-68,48,52,-43,71,102,123,-13,21,-127, 
  /* [18][0][][] */ 51,2,9,-101,31,-45,85,-31,33,80,-69,47,0,52,17,-127, 
  /* [19][0][][] */ -101,-7,-80,-50,-110,111,-8,-45,4,-81,61,-127,-52,-75,-42,32, 
  /* [20][0][][] */ -26,85,82,-82,93,-32,-35,58,-99,-84,10,-78,-29,127,-8,-7, 
  /* [21][0][][] */ 19,-118,-91,-5,125,-29,10,127,-51,-16,-22,61,113,-50,-40,21, 
  /* [22][0][][] */ 46,-30,62,34,-21,-31,67,48,-1,87,46,37,-2,29,127,20, 
  /* [23][0][][] */ -127,-29,-48,29,102,44,51,27,24,27,-26,-59,25,124,13,120, 
  /* [24][0][][] */ 48,3,60,71,-15,-127,10,-48,-16,76,-105,55,-44,-70,67,-71, 
  /* [25][0][][] */ 97,2,127,50,55,-1,-33,11,-125,125,44,-57,-10,-4,60,5, 
  /* [26][0][][] */ -23,31,45,45,-77,89,-63,38,-56,-16,-84,41,-16,13,80,-127, 
  /* [27][0][][] */ 52,10,-15,-17,-55,-1,-101,30,-109,-21,-43,-42,-91,30,2,127, 
  /* [28][0][][] */ -52,23,54,11,30,-12,-127,16,21,-13,-18,3,27,-35,-73,-50, 
  /* [29][0][][] */ -22,-127,-30,99,-31,2,119,13,103,49,-100,90,15,-38,-21,73, 
  /* [30][0][][] */ 56,-32,-73,-19,-127,6,45,-29,0,6,-3,-18,-33,54,-11,93, 
  /* [31][0][][] */ -127,-29,-10,68,-40,15,-1,-3,-39,-83,-4,-17,12,-73,-20,108, 
  /* [32][0][][] */ -98,-37,-77,-2,-127,-48,3,-44,120,34,-27,-26,30,67,59,-18, 
  /* [33][0][][] */ 0,31,-86,34,-127,-85,13,-27,-91,23,-51,-65,2,89,79,25, 
  /* [34][0][][] */ -4,57,45,-11,-59,-30,42,9,16,-127,-33,6,-53,-10,57,96, 
  /* [35][0][][] */ 36,27,-85,-12,-97,-5,127,-54,76,52,-11,-42,2,115,41,120, 
  /* [36][0][][] */ 0,-28,-35,7,127,-7,37,50,-26,30,-58,-46,42,15,-17,0, 
  /* [37][0][][] */ -106,16,8,-61,45,-110,-41,-31,-5,-39,-61,49,97,-48,-2,-127, 
  /* [38][0][][] */ 61,107,55,-83,-108,-39,-127,-57,-88,-36,90,54,-31,-106,40,-53, 
  /* [39][0][][] */ -25,-67,-32,85,52,122,75,-40,-38,41,31,-36,9,127,15,115, 
  /* [40][0][][] */ 127,55,116,60,-95,-34,13,-2,-63,40,-1,-56,-31,-79,127,-12, 
  /* [41][0][][] */ -20,-8,24,43,-67,102,3,38,-36,38,-117,25,21,41,47,-127, 
  /* [42][0][][] */ -17,-90,9,-43,127,23,56,28,-47,-92,-77,-21,-40,20,-40,56, 
  /* [43][0][][] */ -41,-91,-62,-67,127,45,19,21,-21,-18,-114,-42,111,33,-86,19, 
  /* [44][0][][] */ -54,-127,-35,-50,39,40,46,51,-77,-112,-89,84,-80,-17,38,73, 
  /* [45][0][][] */ 19,-41,-59,-44,-127,35,-53,-79,90,-19,22,-36,2,-20,-4,12, 
  /* [46][0][][] */ 24,-101,-53,37,127,-82,-12,120,-35,-23,88,87,-34,-34,41,-126, 
  /* [47][0][][] */ -90,-61,-27,102,29,23,32,73,26,127,64,56,-25,30,-30,94, 
  /* [48][0][][] */ 43,-1,-106,-102,30,-56,20,41,55,-97,1,12,-48,18,-49,-127, 
  /* [49][0][][] */ 2,49,-36,72,21,8,66,20,-55,123,-25,48,-34,-18,57,127, 
  /* [50][0][][] */ -10,-2,25,0,-127,-22,5,-43,64,12,21,52,-38,-71,10,2, 
  /* [51][0][][] */ 32,25,-46,-127,-35,47,53,-60,31,14,46,-42,10,81,-19,26, 
  /* [52][0][][] */ -3,-23,-1,-63,35,-80,20,-15,10,-38,127,-48,32,-4,-35,112, 
  /* [53][0][][] */ -31,-56,52,-24,-39,-127,41,-107,32,81,-98,84,-5,-2,31,-115, 
  /* [54][0][][] */ 64,113,19,-41,-127,-23,-71,-107,-4,20,80,53,-75,-32,49,17, 
  /* [55][0][][] */ 19,41,-71,74,-44,66,72,-33,27,127,17,55,18,34,-5,55, 
  /* [56][0][][] */ 32,-106,-52,76,-13,25,-26,37,127,38,21,14,-63,-42,62,74, 
  /* [57][0][][] */ 0,51,58,-97,123,41,5,-55,127,-22,21,102,50,3,67,-4, 
  /* [58][0][][] */ 82,-37,-46,-122,70,51,7,113,90,127,-35,36,29,-49,102,-22, 
  /* [59][0][][] */ -49,30,50,-38,-16,-77,-25,8,-1,10,-101,-88,-127,-41,70,-2, 
  /* [60][0][][] */ 94,-46,17,43,20,-42,-24,-50,45,127,-44,55,21,-76,-39,-56, 
  /* [61][0][][] */ 39,87,-17,-35,-88,-127,9,-56,-62,-45,-47,-2,-55,-54,84,61, 
  /* [62][0][][] */ -25,89,-57,59,-65,127,-41,39,-81,3,-36,9,-32,24,62,-79, 
  /* [63][0][][] */ 12,-4,-70,-127,-23,-33,77,-9,-6,-92,-17,37,-25,66,20,-11, 
  /* [64][0][][] */ -55,27,-12,-42,88,-41,56,97,-119,-7,-70,-7,-11,127,37,79, 
  /* [65][0][][] */ -46,20,-68,-9,38,42,14,-32,-117,-75,-1,-55,-127,94,-68,36, 
  /* [66][0][][] */ -4,82,-6,10,-52,127,-37,3,-72,35,-62,32,-47,53,65,-85, 
  /* [67][0][][] */ 11,-17,-51,-12,-31,-114,39,-47,-30,14,28,127,-65,-7,9,-103, 
  /* [68][0][][] */ 26,-127,-22,60,3,2,15,31,42,57,24,24,-45,35,-15,-57, 
  /* [69][0][][] */ 50,76,35,-127,-35,-32,-42,55,64,-1,65,59,27,-105,38,-83, 
  /* [70][0][][] */ 27,35,39,5,63,-19,-100,-27,-127,-81,38,46,-59,70,-55,10, 
  /* [71][0][][] */ -3,-111,86,-33,34,-44,17,53,-58,98,-127,-15,35,99,19,53, 
  /* [72][0][][] */ -29,23,31,46,-15,-2,-82,-41,-30,65,-30,13,14,127,-104,21, 
  /* [73][0][][] */ -1,-46,-25,-55,58,-98,35,-38,77,95,99,-25,42,-32,-92,127, 
  /* [74][0][][] */ 68,19,-45,52,-86,-5,113,22,75,66,29,104,127,21,-57,24, 
  /* [75][0][][] */ -31,49,-30,18,-32,127,0,20,-34,22,-13,43,-24,39,4,-45, 
  /* [76][0][][] */ -79,78,-60,4,-76,12,13,10,47,37,-46,-65,37,-38,-127,57, 
  /* [77][0][][] */ 105,66,-105,122,53,68,56,73,41,-17,127,-10,56,-20,53,6, 
  /* [78][0][][] */ 17,-48,5,-65,65,-127,18,-61,73,46,124,-19,-11,-24,-26,113, 
  /* [79][0][][] */ -34,64,17,44,12,-67,-56,-7,-115,14,67,35,127,69,-63,-65, 
  /* [80][0][][] */ -70,21,82,6,25,27,-18,-127,-56,37,-81,-36,-6,-80,42,47, 
  /* [81][0][][] */ 84,69,-30,21,30,-7,81,98,-114,127,-52,-30,-34,44,126,111, 
  /* [82][0][][] */ 1,92,-36,-34,15,-23,71,-32,-21,14,-38,89,127,7,54,-23, 
  /* [83][0][][] */ 19,-2,2,13,-13,9,-22,-116,83,-19,108,37,23,-26,-37,-127, 
  /* [84][0][][] */ -127,-71,-53,-39,-17,87,69,18,62,37,75,86,41,42,-51,31, 
  /* [85][0][][] */ 31,-24,96,-32,21,10,-25,127,-22,43,1,23,-67,50,81,64, 
  /* [86][0][][] */ -78,71,-41,15,69,85,-10,26,117,67,127,-25,-22,90,-18,-42, 
  /* [87][0][][] */ 31,-55,15,-55,43,-127,26,-39,48,-4,64,-23,42,-51,-45,76, 
  /* [88][0][][] */ -74,51,54,-15,118,-54,27,8,-60,-53,76,-60,100,127,94,-124, 
  /* [89][0][][] */ -14,32,-30,49,-27,127,-22,44,-30,6,-17,36,5,63,48,-82, 
  /* [90][0][][] */ 46,-97,7,-8,127,22,47,21,8,-93,-116,-62,-30,-53,-84,32, 
  /* [91][0][][] */ -62,45,26,-46,1,-55,-80,23,-127,32,-118,-127,-88,-24,-30,30, 
  /* [92][0][][] */ 40,81,6,7,-127,-113,14,13,4,41,6,-27,-26,-43,38,-6, 
  /* [93][0][][] */ 15,-71,-127,35,-4,-7,24,86,93,74,29,88,-39,98,-33,-35, 
  /* [94][0][][] */ 90,36,101,-46,31,-16,30,10,29,95,-26,41,22,-12,127,4, 
  /* [95][0][][] */ -79,-10,-15,-47,127,-7,32,23,-43,6,-98,-62,-21,30,-51,-1, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0036012139171361923, 0.0013330898946151137, 0.0042977645061910152, 0.0042060269042849541, 0.0033456517849117517, 0.00088709464762359858, 0.0041074561886489391, 0.0029843843076378107, 0.0016436531441286206, 0.0031243681441992521, 0.0016223988495767117, 0.0026028063148260117, 0.0034027339424937963, 0.0064661847427487373, 0.0018559293821454048, 0.0021433078218251467, 0.0028911603149026632, 0.0026100825052708387, 0.0029441234655678272, 0.00097213481785729527, 0.0036071627400815487, 0.0013646435691043735, 0.0032430305145680904, 0.0023203447926789522, 0.0017215071711689234, 0.0021350174210965633, 0.0027645356021821499, 0.0027447349857538939, 0.002905616071075201, 0.003992550540715456, 0.0026740324683487415, 0.0030892519280314445, 0.0039956122636795044, 0.0019617914222180843, 0.0026671052910387516, 0.0022245552390813828, 0.0028259232640266418, 0.0030933311209082603, 0.0017979233525693417, 0.0026254551485180855, 0.0007599083473905921, 0.0030399805400520563, 0.0024381165858358145, 0.0022864849306643009, 0.002318074693903327, 0.0015438301488757133, 0.0015310348244383931, 0.0015658290358260274, 0.0033097593113780022, 0.004475919995456934, 0.0032222047448158264, 0.0017249650554731488, 0.0028628846630454063, 0.0025231172330677509, 0.0010314283426851034, 0.0041880514472723007, 0.0046612047590315342, 0.0021474210079759359, 0.0030296922195702791, 0.0030290873255580664, 0.0020834158640354872, 0.0013412036933004856, 0.0032220459543168545, 0.0035179858095943928, 0.00056383770424872637, 0.00091352558229118586, 0.0033024062868207693, 0.0037337667308747768, 0.0024766074493527412, 0.0025834266562014818, 0.0035023936070501804, 0.0023744986392557621, 0.003587306709960103, 0.0023801845964044333, 0.0037179766222834587, 0.0040901629254221916, 0.0026532232295721769, 0.0015642980579286814, 0.0026288439985364676, 0.001702209934592247, 0.0038099654484540224, 0.0043578287586569786, 0.0027190095279365778, 0.0016738013364374638, 0.0029454585164785385, 0.0019370970549061894, 0.0018329755403101444, 0.003850532928481698, 0.002741579432040453, 0.0037708680611103773, 0.0026798902545124292, 0.001717936247587204, 0.0022953187581151724, 0.0033607184886932373, 0.002446264959871769, 0.0024898145347833633, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -3943, 7269, -10654, -1728, 8361, -13755, -34560, -7039, -7040, 2116, -15460, -14372, 4528, -16200, -6020, -1434, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00012314191553741693, 0.00012523934128694236, 0.00012629014963749796, 0.00014326402742881328, 9.7169038781430572e-05, 0.00011463715782156214, 8.4829596744384617e-05, 0.00012352786143310368, 9.8331853223498911e-05, 0.00010308452328899875, 0.00023710449750069529, 0.00016347659402526915, 0.00015023823652882129, 9.2357746325433254e-05, 0.00015866571629885584, 0.00012907326163258404, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 32,50,3,-40,45,58,-52,39,-22,117,-1,51,-38,26,-20,44,29,78,67,-49,-83,95,-16,43,76,47,57,32,-57,-35,-5,87,-16,4,-82,57,57,-127,-41,10,25,-46,68,-18,-9,-64,-58,1, 
  /* [1][0][][] */ -38,-1,-66,-36,9,79,-43,23,-25,-26,-19,41,52,-26,-35,-13,-9,-28,14,8,-45,33,-94,-39,-47,-37,50,63,-8,-24,44,-30,10,-56,-27,43,6,-50,127,-41,-31,39,-34,-15,41,50,30,18, 
  /* [2][0][][] */ -8,-2,31,-25,-29,-75,18,27,102,59,-55,-5,90,-37,127,77,-79,-7,-48,15,60,-81,-38,-87,-2,-45,37,-76,37,48,-26,-5,18,-19,65,24,-71,4,-17,-38,37,11,45,-19,7,-94,76,-58, 
  /* [3][0][][] */ 43,-10,-19,-26,32,108,25,-36,47,-50,16,-17,-54,11,9,41,-46,-71,64,-127,-2,3,-35,-5,-33,111,126,60,-13,-46,23,47,74,-33,91,43,-42,-53,7,54,40,35,-10,2,33,28,-13,-17, 
  /* [4][0][][] */ 105,-25,40,-37,101,83,69,6,57,-11,-87,27,45,-20,29,1,-81,-106,-30,-108,-12,16,-26,-28,-89,123,-115,127,-37,-60,30,75,29,-59,21,-39,0,20,-21,13,-46,-6,-7,67,-49,120,-44,-81, 
  /* [5][0][][] */ 2,0,-64,8,-5,92,19,-8,88,64,40,95,54,-18,37,-3,-55,127,-34,52,5,-16,-77,-10,32,-10,-81,-33,-10,39,15,-27,-56,-4,49,10,-58,-1,-94,6,90,-29,15,44,-23,-4,-59,26, 
  /* [6][0][][] */ 46,-1,11,76,10,-21,96,-52,-10,48,127,106,25,48,-51,39,37,-19,-87,61,18,-55,-37,50,-89,85,60,3,89,49,-9,-19,68,-58,-90,-18,80,39,8,1,34,24,34,-12,49,112,15,-19, 
  /* [7][0][][] */ -110,2,-33,16,-65,-54,18,37,85,111,-61,-76,-107,17,3,-16,-84,92,0,127,-58,37,27,49,-14,-83,-27,-87,18,35,-16,5,-12,6,14,-14,7,-57,112,7,22,38,24,-24,53,68,-32,0, 
  /* [8][0][][] */ -11,-104,54,-38,67,-71,79,-70,-66,-102,47,46,-13,-4,-1,18,23,14,-55,101,6,47,-40,5,39,3,-63,-28,-124,11,-34,-105,-5,-88,-18,98,2,43,126,12,5,-16,56,127,-35,-63,-36,74, 
  /* [9][0][][] */ 43,-43,40,-55,40,68,-23,25,15,-36,-37,-8,34,-61,86,-4,17,-101,50,34,-53,50,49,-9,-19,-59,-19,66,46,66,-42,-28,-36,19,8,127,6,-32,-42,-19,-6,12,35,102,53,66,-70,19, 
  /* [10][0][][] */ -12,26,-16,-10,28,22,-66,-29,54,35,54,-7,-35,-1,56,-45,-63,127,9,47,-6,-12,25,25,-49,35,7,100,33,-4,-46,-2,72,6,-12,26,-17,-52,-38,22,-88,-2,28,-11,29,53,22,35, 
  /* [11][0][][] */ -46,20,-6,37,25,35,14,12,18,15,-127,-59,55,30,-8,-41,-3,29,-58,-46,-6,-10,115,24,53,30,-1,23,3,6,-19,52,40,12,-35,-5,41,73,103,44,16,-43,62,-2,-40,-13,77,-1, 
  /* [12][0][][] */ -63,-13,46,13,-48,-74,13,-11,-37,-22,-127,13,66,-96,23,41,41,89,74,-111,-6,50,-31,-80,6,-15,30,-20,18,8,-24,90,68,76,38,-21,-47,-36,37,2,-36,10,73,2,38,-14,-40,-40, 
  /* [13][0][][] */ -66,-121,-29,-99,17,28,65,6,-114,26,111,-61,39,48,120,7,110,28,18,-82,80,-71,127,30,-60,20,-11,7,-36,-105,-112,14,65,-18,-55,64,40,-51,87,-51,3,65,78,38,61,-18,106,-57, 
  /* [14][0][][] */ 64,18,-41,-3,-42,-3,-79,-35,-28,41,46,40,-6,-66,13,-36,36,-106,33,6,86,-38,24,-10,6,108,-63,-8,-49,-24,-79,12,127,43,73,-6,-65,19,-25,51,-11,-35,95,-17,-55,-42,-45,64, 
  /* [15][0][][] */ -51,23,31,24,91,9,-2,33,30,77,-23,51,37,-15,-36,-16,-3,41,-8,-24,7,-36,-49,-38,46,-57,-42,60,-38,14,12,-9,-63,6,127,-9,-93,6,36,0,-29,-21,14,-11,-36,-41,-13,6, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0052335313521325588, 0.0053226719610393047, 0.0053673312067985535, 0.0060887211002409458, 0.0041296840645372868, 0.0048720790073275566, 0.0036052577197551727, 0.0052499342709779739, 0.0041791037656366825, 0.0043810922652482986, 0.01007694099098444, 0.0069477553479373455, 0.0063851252198219299, 0.0039252042770385742, 0.0067432927899062634, 0.005485613364726305, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 17751, 1470, 19743, 738, 17408, -2549, 51384, 417, 13158, 40830, -2108, 24743, 6720, 15330, 31768, 29194, 1223, 3182, 8963, 48878, 1389, 21893, 1711, 15539, 13429, 36468, -4319, -3841, -605, 16931, 15698, -60, 859, 4657, 2415, 16998, 8588, 30276, -249, 20678, 22613, -156, 916, 13363, -633, 1998, 37487, 30998, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.9078148701228201e-05, 0.00011055220238631591, 6.4495259721297771e-05, 9.683795360615477e-05, 0.00011598005221458152, 0.00013688729086425155, 4.4070402509532869e-05, 0.0002237148437416181, 0.00010135687625734136, 5.0429534894647077e-05, 7.2935130447149277e-05, 8.9431872765999287e-05, 4.2240204493282363e-05, 9.0073459432460368e-05, 5.2917894208803773e-05, 6.3889230659697205e-05, 7.0064990723039955e-05, 5.240552854957059e-05, 0.00014408968854695559, 4.282695590518415e-05, 7.5830415880773216e-05, 4.966566848452203e-05, 0.00010106676927534863, 6.0929425671929494e-05, 7.1368689532391727e-05, 6.2766099290456623e-05, 8.4044957475271076e-05, 6.9597699621226639e-05, 0.00023622631852049381, 7.7191543823573738e-05, 8.8045322627294809e-05, 0.00031803612364456058, 0.00014255392306949943, 0.00020440037769731134, 9.4809831352904439e-05, 5.6414333812426776e-05, 8.8914464868139476e-05, 5.6684504670556635e-05, 8.1093065091408789e-05, 7.2238173743244261e-05, 6.6004584368783981e-05, 0.00012623461952898651, 0.00022324644669424742, 8.6422587628476322e-05, 0.00016349597717635334, 5.1198971050325781e-05, 5.0517013733042404e-05, 6.3532468630000949e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -89,77,-126,109,-119,65,-83,86,-105,-58,57,-47,86,-100,8,-55,87,63,90,-69,127,-127,67,-94,-50,-56,75,127,-102,-57,-65,114,71,-74,82,-105,-45,-90,84,-55,-37,-109,86,-100,89,80,-127,-79, -94,121,-127,103,-79,127,-62,47,-122,-100,84,-51,98,-101,-35,-79,109,93,122,-60,100,-123,108,-102,-60,-83,105,110,28,-93,-109,92,127,-127,115,-73,-101,-118,98,-127,-95,81,127,-127,-36,98,-81,-76, -41,65,-28,42,-16,50,-65,51,-27,-51,59,-6,78,-88,5,-68,14,60,47,-8,-13,-116,56,-91,-59,-30,36,57,104,-42,-78,60,21,-80,32,-49,-54,-23,80,-120,-127,9,55,-57,-45,72,14,-57, 
  /* [0][1][][] */ -82,62,-110,95,-62,75,-127,79,-127,-75,86,-73,127,-112,-68,-127,127,99,-37,-120,91,-73,110,-87,-127,-75,61,93,-127,-113,-65,91,52,31,64,-110,-80,-127,95,-31,-94,-122,108,-83,127,101,-111,-113, -110,127,-93,127,-127,104,-111,43,-86,-127,127,-127,103,-27,-127,-126,78,127,-71,-127,74,-102,127,-127,-74,-127,127,112,2,-127,-127,127,118,18,127,-127,-127,-93,127,-120,-100,127,106,-53,-73,127,-88,-80, -76,73,-74,31,-65,41,-57,127,-58,-51,61,-62,68,-101,-23,-36,48,62,-55,-15,31,-91,51,-107,-112,-44,40,32,75,-78,-13,62,14,-5,26,-71,-37,-14,101,-88,-22,-50,41,-58,-68,85,24,-94, 
  /* [0][2][][] */ -119,74,23,54,-15,37,-126,48,-63,-71,38,-59,71,-127,-51,-107,104,47,-114,-38,15,-48,-8,-37,-60,-28,23,4,-71,-31,15,20,58,48,10,-67,-31,-51,51,-23,-87,-64,-18,-99,86,69,-72,-127, -127,70,-41,96,-57,27,-111,-11,-43,-70,41,-71,61,-68,-83,-48,71,41,-127,-52,-33,-63,20,-39,-39,-60,45,41,24,-122,-51,64,29,51,40,-98,-46,-22,53,-76,-14,82,29,-31,-53,64,-83,-85, -36,62,-52,36,-39,-8,-76,51,-56,-27,19,-31,17,-43,-66,5,68,28,-82,19,7,-23,7,-51,-47,-14,37,16,61,-32,47,6,2,6,5,-61,23,7,68,-64,17,-2,-29,-14,-53,19,17,-63, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0035113117191940546, 0.0049088560044765472, 0.0028637868817895651, 0.0042999014258384705, 0.0051498692482709885, 0.0060782143846154213, 0.0019568607676774263, 0.0099336234852671623, 0.0045005553402006626, 0.0022392256651073694, 0.0032385429367423058, 0.0039710486307740211, 0.0018755943747237325, 0.0039995373226702213, 0.0023497163783758879, 0.0028368774801492691, 0.0031111000571399927, 0.0023269657976925373, 0.0063980231061577797, 0.0019016478909179568, 0.0033671024721115828, 0.0022053075954318047, 0.0044876737520098686, 0.0027054529637098312, 0.0031689880415797234, 0.0027870067860931158, 0.0037318533286452293, 0.0030903508886694908, 0.010489171370863914, 0.0034275408834218979, 0.0039094816893339157, 0.014121776446700096, 0.0063298302702605724, 0.0090760020539164543, 0.0042098467238247395, 0.0025049690157175064, 0.0039480742998421192, 0.0025169653818011284, 0.0036007801536470652, 0.003207596018910408, 0.0029308055527508259, 0.005605203565210104, 0.0099128251895308495, 0.003837427357211709, 0.007259721402078867, 0.0022733910009264946, 0.0022431099787354469, 0.0028210361488163471, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2859, -1795, 710, -1955, 3196, -1118, 4306, -3857, 1498, 443, 3439, 5690, 397, -304, 784, 5610, -2058, 3549, 6809, 525, -890, 2563, -1760, 4228, 1900, 1926, 1639, -1369, 11303, -882, 2961, -3112, -1213, 5960, -1821, 1643, 2867, 1236, 1124, 3713, 1959, 7696, -3675, 1969, 8151, -217, 2163, 5390, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0001471047435188666, 0.00024216102610807866, 0.00031179242068901658, 0.00021850470511708409, 0.00024071719963103533, 0.00019685486040543765, 0.0001700567954685539, 0.00014144161832518876, 0.00016890880942810327, 0.00021437687973957509, 0.00015587593952659518, 0.00013071416469756514, 0.00027201592456549406, 0.000252999656368047, 0.0001902421354316175, 0.00013896424206905067, 0.00017339849728159606, 0.00020468108414206654, 0.00013293256051838398, 0.00025716039817780256, 0.00025626446586102247, 0.00019239108951296657, 0.00013012286217417568, 0.00016130361473187804, 0.0002134754613507539, 0.00018822941638063639, 0.00022128611453808844, 0.00024345790734514594, 8.5721192590426654e-05, 0.0001717407867545262, 0.00016715525998733938, 0.00013842532644048333, 0.00016199528181459755, 0.00014196815027389675, 0.00016931441496126354, 0.00026765803340822458, 0.00016835643327794969, 0.00021167911472730339, 0.00016015960136428475, 0.00019323902961332351, 0.00026414825697429478, 0.00010288177873007953, 0.00013868756650481373, 0.00021914494573138654, 0.00011052516492782161, 0.00025778322014957666, 0.00024197355378419161, 0.00014122349966783077, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 65,26,127,-39,104,124,-84,-35, 
  /* [1][0][][] */ -4,-72,-127,9,52,11,27,17, 
  /* [2][0][][] */ -127,3,-74,-36,42,24,-80,-48, 
  /* [3][0][][] */ 44,64,112,-57,-18,-127,-13,-33, 
  /* [4][0][][] */ -127,28,-44,-26,28,25,-47,-43, 
  /* [5][0][][] */ -94,10,-56,4,8,56,-89,-127, 
  /* [6][0][][] */ -8,-115,-127,47,89,5,4,43, 
  /* [7][0][][] */ -66,-127,-92,-83,-33,-71,21,67, 
  /* [8][0][][] */ 121,19,-36,2,127,-87,-104,-7, 
  /* [9][0][][] */ -24,66,-59,92,-75,-39,127,-25, 
  /* [10][0][][] */ -23,124,39,87,127,-28,-10,51, 
  /* [11][0][][] */ -57,-40,-24,-9,-71,93,127,-16, 
  /* [12][0][][] */ 66,35,-127,34,-14,-44,-57,-13, 
  /* [13][0][][] */ 78,-33,-76,14,7,-127,-34,-9, 
  /* [14][0][][] */ 8,-60,69,11,114,-127,-63,30, 
  /* [15][0][][] */ -20,-50,-14,127,80,104,-83,47, 
  /* [16][0][][] */ 124,12,-40,25,86,-92,-127,-29, 
  /* [17][0][][] */ 59,127,57,81,50,79,21,-83, 
  /* [18][0][][] */ 21,-16,20,7,127,-10,26,-5, 
  /* [19][0][][] */ 22,117,35,4,-127,38,20,-11, 
  /* [20][0][][] */ -46,24,65,-127,12,24,-7,96, 
  /* [21][0][][] */ -70,97,62,-127,13,52,12,119, 
  /* [22][0][][] */ -55,-70,-83,18,-127,117,123,-44, 
  /* [23][0][][] */ 108,59,-127,22,20,-54,-76,-13, 
  /* [24][0][][] */ -27,43,-4,5,-63,65,-127,104, 
  /* [25][0][][] */ -115,-70,-127,2,-39,-59,66,112, 
  /* [26][0][][] */ 37,-32,-32,-44,109,-19,127,-58, 
  /* [27][0][][] */ 127,-58,32,79,11,20,-30,91, 
  /* [28][0][][] */ 69,86,37,-52,127,-75,58,-20, 
  /* [29][0][][] */ 8,-15,-37,-48,-96,30,127,-61, 
  /* [30][0][][] */ 68,-127,-51,-59,-113,8,13,-72, 
  /* [31][0][][] */ -4,26,7,-28,-127,19,-33,2, 
  /* [32][0][][] */ 39,-61,-56,83,-2,-69,120,-127, 
  /* [33][0][][] */ 67,127,22,33,58,-7,-25,-3, 
  /* [34][0][][] */ -118,-45,127,-7,-17,97,94,27, 
  /* [35][0][][] */ -49,66,127,-24,-53,-46,-33,32, 
  /* [36][0][][] */ -107,-13,100,-24,-25,127,87,35, 
  /* [37][0][][] */ 11,-99,-7,-127,-26,-67,74,25, 
  /* [38][0][][] */ 37,-7,74,-58,41,33,-127,17, 
  /* [39][0][][] */ -19,106,-127,-30,-20,18,2,99, 
  /* [40][0][][] */ 61,-43,8,18,-1,9,0,127, 
  /* [41][0][][] */ -26,89,127,4,2,90,-72,40, 
  /* [42][0][][] */ 69,-127,-97,-21,-108,-1,21,-98, 
  /* [43][0][][] */ -8,-85,30,-27,127,-11,33,25, 
  /* [44][0][][] */ -3,70,127,36,-2,18,-79,-3, 
  /* [45][0][][] */ -37,35,14,89,-109,63,-127,11, 
  /* [46][0][][] */ -28,-40,42,43,-119,-127,-33,-9, 
  /* [47][0][][] */ -34,67,44,-104,-127,43,-6,42, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0018115445272997022, 0.0029821302741765976, 0.0038396171294152737, 0.0026908107101917267, 0.0029643499292433262, 0.0024242002982646227, 0.0020941912662237883, 0.0017418052302673459, 0.0020800542552024126, 0.0026399779599159956, 0.0019195588538423181, 0.0016097002662718296, 0.003349783131852746, 0.0031156041659414768, 0.0023427668493241072, 0.0017112970817834139, 0.0021353431511670351, 0.0025205775164067745, 0.0016370189841836691, 0.0031668422743678093, 0.003155809361487627, 0.002369230380281806, 0.0016024186043068767, 0.0019863988272845745, 0.0026288772933185101, 0.0023179808631539345, 0.0027250628918409348, 0.0029981008265167475, 0.001055627129971981, 0.0021149290259927511, 0.0020584599114954472, 0.0017046605935320258, 0.001994916470721364, 0.0017482892144471407, 0.0020850491710007191, 0.003296117065474391, 0.0020732518751174212, 0.0026067558210343122, 0.0019723107106983662, 0.0023796726018190384, 0.0032528955489397049, 0.0012669538846239448, 0.001707889954559505, 0.0026986950542777777, 0.0013610796304419637, 0.0031745121814310551, 0.0029798215255141258, 0.001739119179546833, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -970, -2298, 20878, -5128, 3611, -17436, 3112, -18317, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 6.756862421752885e-05, 8.0021905887406319e-05, 0.00012938946019858122, 0.00010125503467861563, 9.2727081209886819e-05, 9.49183086049743e-05, 7.2246424679178745e-05, 7.4179813964292407e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -26,-33,-12,-86,17,-30,79,114,-90,-87,-34,-28,-59,-28,-75,65,-98,18,7,127,66,-16,39,89,104,89,21,10,-90,-52,-85,-52,-83,116,46,-61,23,-31,100,-19,40,-2,-8,-103,32,-7,-42,-80, 
  /* [1][0][][] */ -20,47,-30,-35,-61,48,-14,-41,-22,73,-9,23,52,42,-58,-2,-16,-100,66,-59,127,15,-53,27,44,3,-92,71,33,-3,56,30,-31,-6,-10,-19,-5,108,-20,-17,68,42,5,32,80,28,-16,64, 
  /* [2][0][][] */ -11,-31,103,3,83,-44,-13,29,-27,-9,-3,68,9,-50,-46,-127,-38,-85,-34,9,-99,21,-25,-25,-75,18,-4,-42,-43,9,-35,-8,16,-9,31,-8,21,-36,-45,-3,50,-43,30,-37,-51,-42,-62,-41, 
  /* [3][0][][] */ 47,8,59,16,25,-28,27,78,-57,-12,38,-14,-66,53,-17,34,70,17,-45,39,-86,-42,127,-20,25,15,-43,-10,-36,47,82,-55,-22,-80,-19,25,6,-69,-20,48,-68,-40,47,-8,-72,-49,53,-19, 
  /* [4][0][][] */ 31,-11,80,-35,-8,-16,-5,-11,-55,10,-33,-3,39,-76,39,-100,47,45,0,-35,2,32,30,26,11,-5,68,-34,45,18,-127,-22,-13,-12,21,-1,44,-14,38,4,-41,-7,-79,42,-20,-109,7,34, 
  /* [5][0][][] */ 17,-51,64,20,15,14,29,-11,-65,-13,-38,55,44,4,8,-52,113,79,6,-11,88,-63,127,-68,-13,63,5,42,10,9,-47,-56,-4,-34,-18,27,48,39,68,-1,-58,11,42,10,59,-36,86,2, 
  /* [6][0][][] */ -64,34,-127,54,37,-1,57,9,-19,-3,48,-78,-97,-19,-14,4,-101,19,-1,92,11,84,-62,-60,-17,-14,38,51,-25,-35,-71,-5,36,55,-32,-17,-1,-12,84,-15,103,41,-120,-56,-48,79,-54,-41, 
  /* [7][0][][] */ 48,74,-63,34,31,65,97,78,51,63,-86,-10,-17,-2,-55,-39,18,47,127,92,91,-8,104,26,101,66,-35,115,-64,35,20,-53,49,-62,-10,42,-6,93,-63,97,-45,61,-3,-76,65,0,39,-15, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.002871666569262743, 0.0034009309019893408, 0.0054990518838167191, 0.0043033389374613762, 0.0039409007877111435, 0.004034027922898531, 0.0030704729724675417, 0.0031526421662420034, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -137, 13703, -435, -1432, -782, -482, 4996, 5118, -2029, 544, -5338, -52, 2774, -919, -3411, 2819, 7567, 4046, -1871, -5624, -5169, -1341, 12987, 1545, 2774, -993, 433, -7848, -476, -3940, -8168, 6824, 2229, -270, 1702, 933, -38, -1488, 9935, -2058, 1116, -1269, 5864, 8166, 472, 12251, 1888, -1579, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00036382040707394481, 0.00010425690561532974, 0.00066522206179797649, 0.00021414873481262475, 0.00025217278744094074, 0.0004610288015101105, 0.00017866728012450039, 0.00035934674087911844, 0.0001395463477820158, 0.00031679618405178189, 0.00022526919201482087, 0.0012277374044060707, 0.00034542885259725153, 0.00063542398856952786, 0.00031371123623102903, 0.00082963594468310475, 0.00014766991080250591, 7.7961449278518558e-05, 0.00021400574769359082, 0.00024659594055265188, 0.00027065922040492296, 0.00024664393276907504, 0.00012096083810320124, 0.00040384536259807646, 0.00019949954003095627, 0.00035351916449144483, 0.00049685733392834663, 0.00014883506810292602, 0.00027047679759562016, 0.00031360614229924977, 0.00014018647198099643, 0.00013413064880296588, 0.00017126531747635454, 0.00017952507187146693, 0.00021711793669965118, 0.00027914158999919891, 0.0018113937694579363, 0.00033261271892115474, 0.00014655361883342266, 0.0001781352621037513, 0.00020331959240138531, 0.00015138935123104602, 0.00032117895898409188, 0.00015066048945300281, 0.00023984821746125817, 9.3444512458518147e-05, 7.2238122811540961e-05, 0.00018320397066418082, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 14,-70,5,12,-13,-101,-44,22,-45,21,-10,9,41,0,8,3,101,-13,19,14,-19,-3,-99,1,-30,-29,-8,-38,-59,51,-31,-127,78,-9,-32,-37,-1,-13,-3,-41,1,21,-18,-15,-7,58,127,-13, -127,-55,-26,127,-56,81,-115,127,9,20,13,-11,51,15,11,-39,-18,61,52,16,27,127,0,127,98,-35,-43,44,62,-95,-17,-46,95,-9,-19,-127,29,25,-70,-39,-102,-29,-127,-117,33,34,28,122, -14,-20,13,11,-15,47,24,29,-8,-51,-30,-1,-21,9,4,3,-52,26,-42,-20,-13,-7,127,10,-78,0,23,44,13,34,-4,35,16,-9,-30,57,-1,13,22,110,30,-36,16,-42,-3,16,-36,-41, 
  /* [0][1][][] */ -6,-46,-27,5,21,-127,117,-107,-31,31,17,33,127,25,6,-29,-18,-50,34,60,41,-39,25,-9,-62,127,-93,-36,127,-62,27,-124,-13,4,-53,35,11,-41,-45,-10,127,127,14,-127,-101,-81,-4,116, 110,-127,127,14,127,54,-84,-49,19,127,127,-127,-118,127,127,127,127,127,127,127,127,96,-5,-17,114,-93,-127,127,35,127,127,7,-127,127,127,85,-127,127,-127,-121,41,13,-98,-52,127,-127,-25,115, 14,9,-37,9,-39,119,-127,56,71,-98,-13,62,-40,18,14,-60,29,0,-101,20,6,-95,-35,-21,101,-7,-7,123,-72,-19,11,-28,-18,19,79,-50,31,-4,8,-80,106,-9,37,20,-79,69,122,-94, 
  /* [0][2][][] */ -3,31,5,-35,-9,-90,-26,-30,-1,8,21,1,-39,8,-1,8,-51,-13,29,-17,-10,-3,86,-32,-125,9,61,-23,21,22,30,43,20,-6,-48,30,0,6,8,48,-2,17,14,-3,-32,-2,-21,-2, 23,-23,-36,-34,26,19,94,-55,127,-48,8,12,-95,-1,-20,-61,-21,72,23,31,21,17,-24,-58,-127,53,119,16,-86,32,-7,-15,-12,0,-19,-5,57,-4,-11,127,-90,-16,-22,45,43,47,6,-127, -21,15,5,-16,-8,-20,-19,-93,-33,-43,-23,16,11,3,-5,15,51,8,-24,-12,-20,-28,-46,-35,21,-32,60,-11,-15,18,3,24,38,-1,-29,-77,-7,-5,32,50,13,-3,-2,-12,-16,8,84,-32, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015462366864085197, 0.0044309184886515141, 0.028271935880184174, 0.0091013209894299507, 0.010717343538999557, 0.019593723118305206, 0.0075933593325316906, 0.015272236429154873, 0.005930719431489706, 0.013463837094604969, 0.0095739401876926422, 0.052178837358951569, 0.014680725522339344, 0.027005517855286598, 0.013332727365195751, 0.03525952622294426, 0.0062759709544479847, 0.0033133614342659712, 0.0090952441096305847, 0.010480327531695366, 0.011503016576170921, 0.010482367128133774, 0.0051408354192972183, 0.017163427546620369, 0.0084787299856543541, 0.015024564228951931, 0.021116437390446663, 0.0063254903070628643, 0.011495263315737247, 0.013328260742127895, 0.0059579252265393734, 0.0057005523703992367, 0.0072787757962942123, 0.0076298154890537262, 0.0092275124043226242, 0.011863517574965954, 0.076984234154224396, 0.014136040583252907, 0.0062285284511744976, 0.0075707482174038887, 0.0086410827934741974, 0.006434047594666481, 0.013650105334818363, 0.0064030708745121956, 0.01019354909658432, 0.003971391823142767, 0.0030701202340424061, 0.0077861687168478966, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 3722, 4432, 12246, 1837, 2764, -2914, 6705, 8632, 3185, -721, 4754, -3028, 11737, -2701, 2017, 29407, -290, 2777, -75, 2216, 3582, 4077, 918, 124242, 8816, 3542, 23490, 1199, 7619, 10650, 653, 1050, 553, 1245, -460, -115, -3856, -173, 3044, 2210, 5403, 2404, 7212, 4591, 5379, 5582, 1238, 10644, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00018638961773831397, 0.00017237421707250178, 7.6028154580853879e-05, 0.00013402808690443635, 0.0001763816544553265, 0.00018690376600716263, 0.00012207948020659387, 0.00010675860539777204, 0.00017999659758061171, 0.00024150474928319454, 0.00017660892626736313, 0.00016687456809449941, 7.220966654131189e-05, 0.00016928535478655249, 0.00020791932183783501, 3.8832640711916611e-05, 0.00027959278668276966, 0.00016646552830934525, 0.00029155032825656235, 0.00023205325123853981, 0.00019767296907957643, 0.00017098319949582219, 0.00024046009639278054, 9.9244925877428614e-06, 0.00010125242260983214, 0.00016156565106939524, 4.4878714106744155e-05, 0.00028435030253604054, 0.00010721070430008695, 7.9397985246032476e-05, 0.00036682924837805331, 0.00035059297806583345, 0.00019700820848811418, 0.00024836792727001011, 0.00023732686531729996, 0.00035977057996205986, 0.00016024235810618848, 0.00034021976171061397, 0.00018545259081292897, 0.00023594623780809343, 0.00015009361959528178, 0.00023314014833886176, 0.00013131556625012308, 0.0001659046538406983, 0.00011995297973044217, 0.00013518091873265803, 0.00041674842941574752, 8.3457234723027796e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 37,127,-78,-102,28,81,26,83, 
  /* [1][0][][] */ 63,-68,47,-127,-64,77,-75,-51, 
  /* [2][0][][] */ -26,122,98,51,127,9,36,38, 
  /* [3][0][][] */ 114,46,-112,65,-19,-112,-127,-53, 
  /* [4][0][][] */ -1,23,12,-42,-14,99,127,50, 
  /* [5][0][][] */ 65,96,-95,-70,77,127,40,-30, 
  /* [6][0][][] */ -18,127,69,67,110,5,28,-65, 
  /* [7][0][][] */ 127,-7,-6,32,-12,32,90,-3, 
  /* [8][0][][] */ 59,93,47,49,127,54,74,-70, 
  /* [9][0][][] */ 24,95,-127,-93,-31,77,2,35, 
  /* [10][0][][] */ -48,-22,24,-49,-15,-34,-76,127, 
  /* [11][0][][] */ 2,-116,-127,-34,11,4,54,-6, 
  /* [12][0][][] */ -44,-127,-78,-64,-88,38,-34,13, 
  /* [13][0][][] */ -1,23,-106,123,-127,-23,-6,-22, 
  /* [14][0][][] */ -47,-32,-127,5,32,-9,-6,-74, 
  /* [15][0][][] */ 0,-90,-127,18,-113,-39,-10,-31, 
  /* [16][0][][] */ 123,-75,-17,81,-107,39,60,127, 
  /* [17][0][][] */ -25,116,127,-24,-43,-5,-29,-12, 
  /* [18][0][][] */ 17,-127,75,102,31,-62,64,-108, 
  /* [19][0][][] */ 127,-59,-68,17,-103,3,63,106, 
  /* [20][0][][] */ -34,-127,92,89,-22,-76,11,-89, 
  /* [21][0][][] */ -19,-59,-17,-29,127,9,60,27, 
  /* [22][0][][] */ -127,32,-84,77,30,41,-113,-125, 
  /* [23][0][][] */ -75,-28,59,1,-127,118,91,-72, 
  /* [24][0][][] */ -17,74,18,-39,-32,127,103,0, 
  /* [25][0][][] */ -37,-127,-92,-44,-31,-9,-17,-33, 
  /* [26][0][][] */ 3,93,-10,127,-78,28,-72,-38, 
  /* [27][0][][] */ 2,-109,52,91,-18,-40,-6,-127, 
  /* [28][0][][] */ 12,114,55,63,127,-11,20,-60, 
  /* [29][0][][] */ 86,24,-19,39,105,-81,-127,28, 
  /* [30][0][][] */ 32,-16,28,-127,35,-25,2,-18, 
  /* [31][0][][] */ 35,-53,5,57,-8,19,28,127, 
  /* [32][0][][] */ -67,-40,16,-16,-39,127,43,103, 
  /* [33][0][][] */ -25,33,42,-22,50,127,-90,53, 
  /* [34][0][][] */ 50,115,-127,-53,61,74,-49,82, 
  /* [35][0][][] */ 8,-127,42,48,-18,-97,23,-45, 
  /* [36][0][][] */ -26,-34,-88,-27,-127,-37,1,9, 
  /* [37][0][][] */ -61,-127,53,84,-46,-58,10,-44, 
  /* [38][0][][] */ -87,35,63,-95,-109,-123,-90,127, 
  /* [39][0][][] */ 50,-127,58,65,-24,-87,-24,-66, 
  /* [40][0][][] */ 5,51,18,30,-127,-7,-61,-2, 
  /* [41][0][][] */ 107,127,-53,-88,36,41,11,11, 
  /* [42][0][][] */ -3,-49,-16,16,127,12,45,20, 
  /* [43][0][][] */ 115,24,78,14,-78,-44,45,127, 
  /* [44][0][][] */ 58,34,5,34,50,-112,-127,9, 
  /* [45][0][][] */ 54,3,16,15,80,-127,-17,-43, 
  /* [46][0][][] */ 58,-31,-6,127,28,55,22,58, 
  /* [47][0][][] */ -107,-56,101,112,-78,31,110,-127, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0031317921821027994, 0.0028962998185306787, 0.0012774552451446652, 0.002251993166282773, 0.0029636344406753778, 0.0031404311303049326, 0.0020512277260422707, 0.0017938003875315189, 0.0030243741348385811, 0.0040578586049377918, 0.002967453096061945, 0.002803892595693469, 0.0012132955016568303, 0.0028443997725844383, 0.0034935427829623222, 0.00065248145256191492, 0.0046978290192782879, 0.0027970199007540941, 0.0048987441696226597, 0.0038990506436675787, 0.0033213796559721231, 0.0028729275800287724, 0.0040403059683740139, 0.00016675525694154203, 0.0017012833850458264, 0.0027146900538355112, 0.00075406994437798858, 0.0047777662985026836, 0.0018013967201113701, 0.0013340763980522752, 0.0061636106111109257, 0.005890802014619112, 0.0033102100715041161, 0.0041731763631105423, 0.0039876601658761501, 0.0060450080782175064, 0.0026924556586891413, 0.0057165073230862617, 0.0031160479411482811, 0.0039644623175263405, 0.00252193259075284, 0.0039173131808638573, 0.0022064161021262407, 0.0027875958476215601, 0.0020154975354671478, 0.0022713635116815567, 0.0070023722946643829, 0.0014022815739735961, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 5663, 15234, -7159, 5166, -914, 3763, -9948, -18774, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00016976194456219673, 0.0001228314358741045, 0.00013523209781851619, 0.00012886819604318589, 0.00016742576553951949, 0.00011010436719516292, 0.00022062880452722311, 0.00012184171646367759, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -54,-12,30,11,-34,-7,10,9,-45,-4,-56,-55,-25,-60,-12,-23,54,-37,43,32,-14,30,-35,13,3,-34,57,-16,2,-12,16,8,83,32,46,-127,21,11,-13,-49,8,-13,50,51,37,14,35,12, 
  /* [1][0][][] */ 6,40,58,-4,-3,51,-61,-20,7,31,-12,-106,9,97,-13,52,-13,13,-16,-67,-2,-69,-32,18,-80,-22,12,-127,-24,-9,25,-63,41,72,-45,6,106,-32,2,48,-18,50,-71,-21,99,-19,-31,-10, 
  /* [2][0][][] */ -16,-24,-70,40,-15,64,25,3,-4,43,4,28,80,-88,30,-56,42,-84,32,27,-27,64,-25,32,-32,47,-22,-87,11,0,22,-78,-56,-99,29,-18,100,16,-4,-69,13,35,97,37,127,27,23,42, 
  /* [3][0][][] */ 8,35,-62,40,11,-35,-76,-103,14,-14,-35,1,2,33,35,67,0,4,-45,29,5,-115,46,-66,-69,-2,127,-9,-47,8,-56,11,12,-77,5,-17,-33,-36,-26,110,-44,-38,1,21,49,0,-39,41, 
  /* [4][0][][] */ -29,-50,-14,21,33,-26,-8,-18,30,-38,57,-78,5,34,13,15,-23,-25,19,-9,-1,-48,5,-14,15,-17,48,42,31,15,-22,29,-12,-12,-18,7,-77,93,51,-24,30,-16,-20,-16,-79,4,127,20, 
  /* [5][0][][] */ 51,-29,-4,24,21,-30,45,-124,22,-25,-32,127,-81,60,14,-67,-3,-84,3,16,-50,71,-47,-54,-65,84,-34,-6,-28,38,-40,-26,14,42,39,0,-45,-17,-35,-47,11,-37,-49,3,-35,51,89,31, 
  /* [6][0][][] */ 47,-27,13,-10,-24,-17,-30,13,-41,4,-46,127,-43,-33,-2,51,1,50,11,36,24,-69,-19,20,20,37,-70,2,-1,-44,0,26,-1,14,-22,2,15,-1,4,-8,-17,-24,33,62,-4,-29,58,-6, 
  /* [7][0][][] */ -31,10,-13,67,19,37,11,40,6,-3,74,-11,108,104,51,43,57,60,-18,-3,32,-12,-89,-22,15,-17,-38,60,37,-29,-35,-7,29,-10,47,-90,-65,51,51,46,-22,33,87,127,-70,-23,-96,62, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0072148824110627174, 0.0052203359082341194, 0.0057473639026284218, 0.0054768980480730534, 0.0071155950427055359, 0.0046794353984296322, 0.0093767242506146431, 0.0051782727241516113, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 8795, 6010, 3334, 1487, 6913, -2864, -339, 31253, -1343, -6936, 7124, 49218, 3854, 5467, -717, 13052, -1427, 13907, -1562, 7595, 9006, 391, 4480, -6104, 11814, 1593, -1458, 15973, -653, -2779, -10286, 9156, 2475, 575, -1089, 6638, -11603, 7184, 2285, 24135, 1697, 1353, 4278, 2674, 1522, -282, 2109, -966, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.2203179772477597e-05, 0.0001121324094128795, 0.00016073176811914891, 0.00014798976189922541, 0.00070586008951067924, 0.00014080651453696191, 0.00013774904073216021, 0.00011303529026918113, 9.7044350695796311e-05, 5.8894172980217263e-05, 6.0401478549465537e-05, 6.5673200879245996e-05, 9.3271992227528244e-05, 5.3110725275473669e-05, 0.00027022475842386484, 0.00012247571430634707, 0.00014215717965271324, 0.00027285332907922566, 0.00015223966329358518, 0.00013447509263642132, 0.00012129460083087906, 0.00047655019443482161, 0.00012944504851475358, 0.0002145500184269622, 0.00012226018588989973, 7.8438424679916352e-05, 6.9748188252560794e-05, 0.00010999114601872861, 0.00014023584662936628, 0.00082188023952767253, 0.00021027664479333907, 7.7019758464302868e-05, 9.9502045486588031e-05, 0.00013247247261460871, 0.0001679776469245553, 5.4854303016327322e-05, 7.7707802120130509e-05, 4.4911128497915342e-05, 0.00013257859973236918, 6.7070053773932159e-05, 0.00015694735338911414, 0.00013917864998802543, 7.4497205787338316e-05, 8.9861445303540677e-05, 7.8965727880131453e-05, 0.00025853136321529746, 5.8133151469519362e-05, 0.00018493982497602701, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -73,-61,-42,-7,127,-38,93,-64,-101,-50,-39,-64,127,79,92,-127,46,-17,10,-79,-32,26,-35,-9,-45,63,39,-32,67,-66,21,-50,-127,-78,51,45,38,96,74,-102,-127,-34,52,101,39,-120,94,109, -34,-64,-127,64,-103,109,61,-62,-77,105,94,-127,83,109,127,-80,-93,-94,38,-90,-110,51,-116,110,-25,127,90,-127,103,-38,-7,-113,-51,-71,106,127,124,118,127,-109,-110,-56,49,117,61,124,110,73, -13,-8,-40,102,-48,-4,28,-14,83,26,76,-92,7,77,-34,-33,-72,-28,31,-67,-39,-33,-88,-10,-61,46,11,-52,43,52,127,-86,-26,17,-2,46,70,100,33,40,-40,87,59,24,45,41,13,-102, 
  /* [0][1][][] */ -127,-92,-4,-88,-104,-77,127,-127,-123,-127,96,-36,93,66,-78,-91,127,-127,-49,-79,-43,127,-26,-23,-42,50,127,-43,-114,-64,19,-34,-90,-127,-127,42,48,82,6,-96,40,-21,103,120,83,121,127,-110, -102,-127,-105,-97,-46,127,98,-93,127,108,127,-89,83,127,89,-121,51,-94,-127,-127,-127,88,-127,127,-75,107,118,-112,-127,127,-39,-127,-86,-108,47,124,127,127,-31,-114,64,-79,127,127,127,-3,123,127, -45,-118,-117,127,50,-3,64,-39,87,10,49,-92,-8,67,32,-49,-2,-15,-7,-93,-34,-63,-83,-28,-127,76,21,-73,-54,31,114,-57,-58,14,68,61,80,85,-44,-11,28,127,105,14,65,-64,22,-4, 
  /* [0][2][][] */ -89,-41,22,-10,-76,-37,8,-82,21,-64,28,0,-1,21,-15,-2,-97,-24,100,-84,-28,57,-60,-37,-22,2,101,-34,49,60,-1,19,59,-88,-55,34,42,48,-65,-85,39,-17,56,19,17,54,38,-78, -8,-18,-11,-86,68,33,93,-59,85,70,-37,-57,0,24,-87,-81,29,6,56,-123,-13,54,-22,68,-52,67,88,-26,35,7,-30,-62,0,-34,-72,67,22,62,-117,-127,8,-59,58,78,44,-127,49,17, -12,-49,-35,-37,-32,22,17,-29,-89,25,-3,-44,-25,17,0,-37,53,30,11,-79,-46,-41,-29,-34,-38,-9,14,-51,26,-64,43,17,-66,25,39,49,8,69,-73,-50,-8,40,26,19,17,-21,9,43, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0034936349838972092, 0.0047656274400651455, 0.0068311002105474472, 0.0062895645387470722, 0.029999053105711937, 0.0059842769987881184, 0.0058543342165648937, 0.0048039997927844524, 0.0041243848390877247, 0.0025030022952705622, 0.0025670628529042006, 0.0027911111246794462, 0.0039640595205128193, 0.0022572057787328959, 0.011484552174806595, 0.0052052177488803864, 0.006041679996997118, 0.011596266180276871, 0.0064701857045292854, 0.0057151913642883301, 0.0051550203934311867, 0.020253382623195648, 0.0055014141835272312, 0.0091183753684163094, 0.0051960577256977558, 0.0033336328342556953, 0.0029642980080097914, 0.0046746237203478813, 0.0059600234962999821, 0.034929908812046051, 0.0089367572218179703, 0.0032733397092670202, 0.0042288368567824364, 0.005630080122500658, 0.0071390499360859394, 0.0023313078563660383, 0.003302581375464797, 0.001908722915686667, 0.0056345905177295208, 0.0028504771180450916, 0.0066702626645565033, 0.0059150927700102329, 0.0031661312095820904, 0.0038191115017980337, 0.0033560434821993113, 0.010987582616508007, 0.0024706588592380285, 0.0078599425032734871, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 837, -218, -913, 1555, 18983, 1927, -571, 4014, 1288, 1210, 87, 2659, 761, 476, -693, 853, 2887, 8515, 2637, -1128, 1068, -1460, -168, 2768, -236, -624, 1840, 96, 3970, 14877, 3407, -209, 348, -290, 2533, 101, 609, -177, 1479, 1569, 1442, 1537, 197, -481, 646, 2187, 1074, -258, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00043206920963712037, 0.00045591534581035376, 0.00028192077297717333, 0.00027390269679017365, 5.1972081564599648e-05, 0.00033896311651915312, 0.00053298083366826177, 0.00022478259052149951, 0.00031387063791044056, 0.00057561404537409544, 0.00030508276540786028, 0.00031267263693735003, 0.00024828879395499825, 0.00039451892371289432, 0.00034240720560774207, 0.00029421687941066921, 0.00023251840320881456, 0.00010107125126523897, 0.00026314466958865523, 0.00032033806201070547, 0.00034750145277939737, 0.00019072697614319623, 0.00044178549433127046, 0.0002660206810105592, 0.00033861727570183575, 0.00070955418050289154, 0.00028961003408767283, 0.00067511346423998475, 0.00020545415463857353, 6.6577682446222752e-05, 0.00023076139041222632, 0.00059824838535860181, 0.00037721291300840676, 0.00034169058199040592, 0.00025128648849204183, 0.00039548816857859492, 0.00037994814920239151, 0.00059935951139777899, 0.00031093743746168911, 0.00045645769569091499, 0.00040386701584793627, 0.00036718693445436656, 0.00036644743522629142, 0.00041865455568768084, 0.00041162711568176746, 0.00023287841759156436, 0.0002912231138907373, 0.00033502769656479359, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -48,25,-11,1,-99,-27,-127,48, 
  /* [1][0][][] */ 84,-47,-31,-69,127,-80,59,-1, 
  /* [2][0][][] */ -127,110,-74,-100,32,-20,-9,55, 
  /* [3][0][][] */ 46,-25,79,7,114,125,127,-28, 
  /* [4][0][][] */ -78,-118,95,4,-29,-127,-26,-30, 
  /* [5][0][][] */ 127,-22,88,68,-69,-6,-19,-30, 
  /* [6][0][][] */ 27,36,127,-29,53,-30,-48,33, 
  /* [7][0][][] */ 29,12,-127,-28,-34,111,99,-62, 
  /* [8][0][][] */ -13,127,-57,37,39,88,61,70, 
  /* [9][0][][] */ 8,127,-46,76,4,-103,60,59, 
  /* [10][0][][] */ -27,-127,-5,-34,-97,-110,-56,-104, 
  /* [11][0][][] */ -127,-80,94,33,-11,-73,86,51, 
  /* [12][0][][] */ -45,32,-127,62,22,-50,-67,107, 
  /* [13][0][][] */ 73,-127,101,106,12,47,42,-53, 
  /* [14][0][][] */ -11,82,-6,-127,-11,-117,-17,-76, 
  /* [15][0][][] */ 27,114,21,-21,38,-48,96,-127, 
  /* [16][0][][] */ -87,-127,-23,68,-39,37,-49,87, 
  /* [17][0][][] */ -23,-100,-127,91,-73,90,-68,107, 
  /* [18][0][][] */ -102,-38,-47,49,-9,64,-13,127, 
  /* [19][0][][] */ 14,-124,91,-127,16,-60,24,-32, 
  /* [20][0][][] */ -11,103,32,23,61,127,92,-6, 
  /* [21][0][][] */ 37,111,46,-27,46,-57,90,-127, 
  /* [22][0][][] */ 24,24,105,8,-12,127,22,-16, 
  /* [23][0][][] */ -80,-60,31,-81,106,78,-71,-127, 
  /* [24][0][][] */ -89,-93,64,-94,126,122,-40,-127, 
  /* [25][0][][] */ 127,26,-55,-13,31,37,-47,-8, 
  /* [26][0][][] */ -127,-42,-121,-23,-56,-37,12,-16, 
  /* [27][0][][] */ 72,39,5,-71,-127,-26,86,113, 
  /* [28][0][][] */ -127,-88,7,20,-68,-107,-18,9, 
  /* [29][0][][] */ 127,72,50,-82,16,29,-42,-91, 
  /* [30][0][][] */ -100,-94,31,-84,36,74,-41,-127, 
  /* [31][0][][] */ 46,43,0,127,14,-78,5,25, 
  /* [32][0][][] */ -56,127,-25,84,2,87,4,58, 
  /* [33][0][][] */ -45,127,-74,27,18,-34,-24,33, 
  /* [34][0][][] */ -127,-123,-49,118,-34,27,38,101, 
  /* [35][0][][] */ -45,127,-32,1,74,96,54,59, 
  /* [36][0][][] */ 91,31,0,-45,-127,-51,118,89, 
  /* [37][0][][] */ -62,127,29,15,-127,106,-28,-106, 
  /* [38][0][][] */ 28,53,55,19,127,111,95,73, 
  /* [39][0][][] */ -10,-76,41,-28,8,52,-109,127, 
  /* [40][0][][] */ -48,-49,-59,127,-24,-9,15,34, 
  /* [41][0][][] */ 127,39,76,95,-38,-11,-22,-18, 
  /* [42][0][][] */ -29,12,-65,-127,44,-100,5,79, 
  /* [43][0][][] */ 28,-6,87,4,31,127,90,9, 
  /* [44][0][][] */ -23,-35,-58,127,37,-5,-38,-45, 
  /* [45][0][][] */ 79,110,125,-127,45,-37,48,-122, 
  /* [46][0][][] */ -33,-116,-57,40,9,62,-65,127, 
  /* [47][0][][] */ 33,34,94,11,75,127,102,-23, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0044504953548312187, 0.0046961205080151558, 0.0029039029031991959, 0.0028213134501129389, 0.00053533440222963691, 0.0034914633724838495, 0.0054899277165532112, 0.0023153556976467371, 0.0032330001704394817, 0.0059290677309036255, 0.0031424812041223049, 0.0032206601463258266, 0.0025574793107807636, 0.0040637115016579628, 0.003526938846334815, 0.0030305581167340279, 0.0023950377944856882, 0.0010410766117274761, 0.0027105011977255344, 0.0032996172085404396, 0.0035794118884950876, 0.001964568393304944, 0.0045505771413445473, 0.0027401254046708345, 0.0034879010636359453, 0.0073087080381810665, 0.0029831056017428637, 0.0069539537653326988, 0.0021162645425647497, 0.00068577827187255025, 0.0023769398685544729, 0.0061622112989425659, 0.0038854524027556181, 0.0035195574164390564, 0.0025883568450808525, 0.0040736952796578407, 0.0039136265404522419, 0.0061736558564007282, 0.0032027869019657373, 0.0047017070464789867, 0.0041600009426474571, 0.0037821806035935879, 0.0037745633162558079, 0.0043123187497258186, 0.0042399330995976925, 0.0023987460881471634, 0.0029997210949659348, 0.0034509268589317799, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -6939, -3484, 11638, -10057, 18727, 7471, -6111, 9157, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021866659517399967, 0.00023021959350444376, 0.00017410647706128657, 0.00024394530919380486, 0.0001909079437609762, 0.00019788120698649436, 0.00014625483890995383, 0.00024452133220620453, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 9,-19,-26,-79,-27,-32,8,-30,38,10,-20,-9,109,127,-21,-91, 
  /* [1][0][][] */ 127,-53,-49,7,-30,77,-66,-50,-37,89,-39,-45,-6,11,-64,-14, 
  /* [2][0][][] */ -38,-94,47,44,44,-49,-72,-20,25,-98,25,-127,39,-19,-71,12, 
  /* [3][0][][] */ 24,20,20,29,-17,76,-44,-6,127,45,12,21,4,-15,1,29, 
  /* [4][0][][] */ -75,-28,-28,-127,-4,34,47,-114,45,-23,-38,-29,-98,42,-35,-24, 
  /* [5][0][][] */ 73,43,49,-33,34,-38,-127,-118,-9,-59,64,43,-41,38,48,-36, 
  /* [6][0][][] */ 98,38,-112,-69,33,-58,15,-78,-44,20,-127,83,77,-77,4,70, 
  /* [7][0][][] */ -127,1,100,-16,-58,2,-3,-49,-51,65,84,-23,59,-33,29,24, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0092933299019932747, 0.0097843324765563011, 0.0073995250277221203, 0.010367675684392452, 0.008113587275147438, 0.0084099508821964264, 0.0062158303335309029, 0.010392156429588795, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 21031, -528, 1250, 3555, -1219, 840, 8371, 1360, -275, 685, -1536, 1991, 4616, -900, -205, -578, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00010520475188968703, 0.00022438545420300215, 0.00013058912009000778, 0.00021368268062360585, 0.0010754064423963428, 0.00079601985635235906, 0.0001696337858447805, 0.00085153838153928518, 0.00029455425101332366, 0.0011108346516266465, 0.00028003432089462876, 0.00022957524925004691, 7.3727758717723191e-05, 0.00023081978724803776, 0.00020516524091362953, 0.00058934179833158851, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 3,-3,17,1,-21,9,-1,15,-10,-13,-7,-10,12,-1,6,-8, 9,-10,12,2,11,-4,10,-28,-16,7,-9,79,-20,28,2,-10, 11,-16,0,-4,5,-16,-3,10,0,0,0,-12,7,0,-5,-9, 
  /* [0][1][][] */ 8,-18,7,6,127,-26,-127,-20,127,127,-4,0,127,-28,4,-28, -127,127,127,0,-88,-94,1,-100,9,-107,127,127,118,127,127,127, 14,-14,-4,3,-5,127,4,-9,2,-13,-15,-13,15,-8,-24,-17, 
  /* [0][2][][] */ -1,-7,6,-5,-17,14,67,8,-4,-8,-1,5,-9,-2,4,-21, 15,-29,-12,-127,6,-18,-7,127,-10,1,-7,-21,-25,-60,-23,-48, -2,-6,-5,2,5,-7,5,-1,2,1,-7,3,22,-8,-13,-21, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.004471201915293932, 0.0095363818109035492, 0.0055500376038253307, 0.0090815136209130287, 0.04570477083325386, 0.033830843865871429, 0.0072094355709850788, 0.036190379410982132, 0.012518555857241154, 0.047210469841957092, 0.011901457794010639, 0.0097569478675723076, 0.0031334296800196171, 0.0098098404705524445, 0.0087195225059986115, 0.025047026574611664, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 2582, 824, -217, 891, 53414, 36661, 2677, 2756, 4123, 3294, 1157, 567, 5596, -6644, 351, 22597, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.0002634924603626132, 0.00088377948850393295, 0.00036719013587571681, 0.00020202771702315658, 2.6585850719129667e-05, 4.1306739149149507e-05, 0.00020310499530751258, 3.8230398786254227e-05, 0.00020694019622169435, 6.1109691159799695e-05, 0.00059098872588947415, 0.00064167322125285864, 0.00040108707617036998, 2.292273347848095e-05, 0.0007351128151640296, 4.9549926188774407e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -93, -123, -36, 
  /* [0][1][][] */ 68, -45, 13, 
  /* [0][2][][] */ 33, 127, 16, 
  /* [1][0][][] */ 103, -95, -11, 
  /* [1][1][][] */ -127, 102, 23, 
  /* [1][2][][] */ 13, -2, -12, 
  /* [2][0][][] */ -24, -3, -46, 
  /* [2][1][][] */ 35, 94, 127, 
  /* [2][2][][] */ -13, -94, -77, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -20, -14, 
  /* [3][2][][] */ -100, -126, -42, 
  /* [4][0][][] */ 15, -41, -10, 
  /* [4][1][][] */ 13, -127, 8, 
  /* [4][2][][] */ 11, -89, -19, 
  /* [5][0][][] */ -77, 25, 7, 
  /* [5][1][][] */ -127, 30, 6, 
  /* [5][2][][] */ -76, 24, 3, 
  /* [6][0][][] */ -18, 79, 127, 
  /* [6][1][][] */ -52, 55, -16, 
  /* [6][2][][] */ -36, -51, -88, 
  /* [7][0][][] */ 56, 19, -26, 
  /* [7][1][][] */ 127, 66, -8, 
  /* [7][2][][] */ 40, 21, -19, 
  /* [8][0][][] */ -20, -29, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -29, 55, -15, 
  /* [9][1][][] */ -27, 127, -21, 
  /* [9][2][][] */ -18, 92, -5, 
  /* [10][0][][] */ 23, 85, 12, 
  /* [10][1][][] */ -38, -127, -29, 
  /* [10][2][][] */ 10, 38, 17, 
  /* [11][0][][] */ 6, -21, 9, 
  /* [11][1][][] */ 64, -96, 34, 
  /* [11][2][][] */ -86, 127, -47, 
  /* [12][0][][] */ -43, 45, -12, 
  /* [12][1][][] */ -127, 110, 3, 
  /* [12][2][][] */ -79, 75, 2, 
  /* [13][0][][] */ 124, 54, 5, 
  /* [13][1][][] */ 127, 105, -16, 
  /* [13][2][][] */ 56, 93, 26, 
  /* [14][0][][] */ -31, -29, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -71, 82, 
  /* [15][0][][] */ -75, 9, 50, 
  /* [15][1][][] */ -122, -127, 35, 
  /* [15][2][][] */ -65, -111, 6, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.067190572619438171, 0.22536376118659973, 0.093633480370044708, 0.051517065614461899, 0.0067793913185596466, 0.010533218272030354, 0.051791772246360779, 0.0097487512975931168, 0.052769746631383896, 0.015582970343530178, 0.15070211887359619, 0.16362665593624115, 0.10227719694375992, 0.0058452966623008251, 0.18745376169681549, 0.012635230086743832, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.097083397209644318, } };
const TfArray<1, int> quant46_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.059515319764614105, } };
const TfArray<1, int> quant50_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.049475546926259995, } };
const TfArray<1, int> quant53_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.081204041838645935, } };
const TfArray<1, int> quant54_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.022520970553159714, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.022520970553159714, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.05862567201256752, } };
const TfArray<1, int> quant58_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.022306343540549278, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.058101408183574677, } };
const TfArray<1, int> quant61_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.070977173745632172, } };
const TfArray<1, int> quant62_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.02280057966709137, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.040351148694753647, } };
const TfArray<1, int> quant65_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.080845341086387634, } };
const TfArray<1, int> quant66_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.021476181223988533, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.047574155032634735, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.11950233578681946, } };
const TfArray<1, int> quant69_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
